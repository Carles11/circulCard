/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/websocket";
exports.ids = ["vendor-chunks/websocket"];
exports.modules = {

/***/ "(rsc)/./node_modules/websocket/index.js":
/*!*****************************************!*\
  !*** ./node_modules/websocket/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = __webpack_require__(/*! ./lib/websocket */ \"(rsc)/./node_modules/websocket/lib/websocket.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2Vic29ja2V0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQUEsOEdBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dlYnNvY2tldC9pbmRleC5qcz8zMDNkIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvd2Vic29ja2V0Jyk7Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/websocket/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/websocket/lib/Deprecation.js":
/*!***************************************************!*\
  !*** ./node_modules/websocket/lib/Deprecation.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";
eval("/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/ \nvar Deprecation = {\n    disableWarnings: false,\n    deprecationWarningMap: {},\n    warn: function(deprecationName) {\n        if (!this.disableWarnings && this.deprecationWarningMap[deprecationName]) {\n            console.warn(\"DEPRECATION WARNING: \" + this.deprecationWarningMap[deprecationName]);\n            this.deprecationWarningMap[deprecationName] = false;\n        }\n    }\n};\nmodule.exports = Deprecation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2Vic29ja2V0L2xpYi9EZXByZWNhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7dUVBY3VFO0FBRXZFLElBQUlBLGNBQWM7SUFDZEMsaUJBQWlCO0lBRWpCQyx1QkFBdUIsQ0FFdkI7SUFFQUMsTUFBTSxTQUFTQyxlQUFlO1FBQzFCLElBQUksQ0FBQyxJQUFJLENBQUNILGVBQWUsSUFBSSxJQUFJLENBQUNDLHFCQUFxQixDQUFDRSxnQkFBZ0IsRUFBRTtZQUN0RUMsUUFBUUYsSUFBSSxDQUFDLDBCQUEwQixJQUFJLENBQUNELHFCQUFxQixDQUFDRSxnQkFBZ0I7WUFDbEYsSUFBSSxDQUFDRixxQkFBcUIsQ0FBQ0UsZ0JBQWdCLEdBQUc7UUFDbEQ7SUFDSjtBQUNKO0FBRUFFLE9BQU9DLE9BQU8sR0FBR1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2Vic29ja2V0L2xpYi9EZXByZWNhdGlvbi5qcz83OWM0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICBDb3B5cmlnaHQgMjAxMC0yMDE1IEJyaWFuIE1jS2VsdmV5LlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxudmFyIERlcHJlY2F0aW9uID0ge1xuICAgIGRpc2FibGVXYXJuaW5nczogZmFsc2UsXG5cbiAgICBkZXByZWNhdGlvbldhcm5pbmdNYXA6IHtcblxuICAgIH0sXG5cbiAgICB3YXJuOiBmdW5jdGlvbihkZXByZWNhdGlvbk5hbWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRpc2FibGVXYXJuaW5ncyAmJiB0aGlzLmRlcHJlY2F0aW9uV2FybmluZ01hcFtkZXByZWNhdGlvbk5hbWVdKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0RFUFJFQ0FUSU9OIFdBUk5JTkc6ICcgKyB0aGlzLmRlcHJlY2F0aW9uV2FybmluZ01hcFtkZXByZWNhdGlvbk5hbWVdKTtcbiAgICAgICAgICAgIHRoaXMuZGVwcmVjYXRpb25XYXJuaW5nTWFwW2RlcHJlY2F0aW9uTmFtZV0gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRGVwcmVjYXRpb247XG4iXSwibmFtZXMiOlsiRGVwcmVjYXRpb24iLCJkaXNhYmxlV2FybmluZ3MiLCJkZXByZWNhdGlvbldhcm5pbmdNYXAiLCJ3YXJuIiwiZGVwcmVjYXRpb25OYW1lIiwiY29uc29sZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/websocket/lib/Deprecation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/websocket/lib/W3CWebSocket.js":
/*!****************************************************!*\
  !*** ./node_modules/websocket/lib/W3CWebSocket.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/ \nvar WebSocketClient = __webpack_require__(/*! ./WebSocketClient */ \"(rsc)/./node_modules/websocket/lib/WebSocketClient.js\");\nvar toBuffer = __webpack_require__(/*! typedarray-to-buffer */ \"(rsc)/./node_modules/typedarray-to-buffer/index.js\");\nvar yaeti = __webpack_require__(/*! yaeti */ \"(rsc)/./node_modules/yaeti/index.js\");\nconst CONNECTING = 0;\nconst OPEN = 1;\nconst CLOSING = 2;\nconst CLOSED = 3;\nmodule.exports = W3CWebSocket;\nfunction W3CWebSocket(url, protocols, origin, headers, requestOptions, clientConfig) {\n    // Make this an EventTarget.\n    yaeti.EventTarget.call(this);\n    // Sanitize clientConfig.\n    clientConfig = clientConfig || {};\n    clientConfig.assembleFragments = true; // Required in the W3C API.\n    var self = this;\n    this._url = url;\n    this._readyState = CONNECTING;\n    this._protocol = undefined;\n    this._extensions = \"\";\n    this._bufferedAmount = 0; // Hack, always 0.\n    this._binaryType = \"arraybuffer\"; // TODO: Should be 'blob' by default, but Node has no Blob.\n    // The WebSocketConnection instance.\n    this._connection = undefined;\n    // WebSocketClient instance.\n    this._client = new WebSocketClient(clientConfig);\n    this._client.on(\"connect\", function(connection) {\n        onConnect.call(self, connection);\n    });\n    this._client.on(\"connectFailed\", function() {\n        onConnectFailed.call(self);\n    });\n    this._client.connect(url, protocols, origin, headers, requestOptions);\n}\n// Expose W3C read only attributes.\nObject.defineProperties(W3CWebSocket.prototype, {\n    url: {\n        get: function() {\n            return this._url;\n        }\n    },\n    readyState: {\n        get: function() {\n            return this._readyState;\n        }\n    },\n    protocol: {\n        get: function() {\n            return this._protocol;\n        }\n    },\n    extensions: {\n        get: function() {\n            return this._extensions;\n        }\n    },\n    bufferedAmount: {\n        get: function() {\n            return this._bufferedAmount;\n        }\n    }\n});\n// Expose W3C write/read attributes.\nObject.defineProperties(W3CWebSocket.prototype, {\n    binaryType: {\n        get: function() {\n            return this._binaryType;\n        },\n        set: function(type) {\n            // TODO: Just 'arraybuffer' supported.\n            if (type !== \"arraybuffer\") {\n                throw new SyntaxError('just \"arraybuffer\" type allowed for \"binaryType\" attribute');\n            }\n            this._binaryType = type;\n        }\n    }\n});\n// Expose W3C readyState constants into the WebSocket instance as W3C states.\n[\n    [\n        \"CONNECTING\",\n        CONNECTING\n    ],\n    [\n        \"OPEN\",\n        OPEN\n    ],\n    [\n        \"CLOSING\",\n        CLOSING\n    ],\n    [\n        \"CLOSED\",\n        CLOSED\n    ]\n].forEach(function(property) {\n    Object.defineProperty(W3CWebSocket.prototype, property[0], {\n        get: function() {\n            return property[1];\n        }\n    });\n});\n// Also expose W3C readyState constants into the WebSocket class (not defined by the W3C,\n// but there are so many libs relying on them).\n[\n    [\n        \"CONNECTING\",\n        CONNECTING\n    ],\n    [\n        \"OPEN\",\n        OPEN\n    ],\n    [\n        \"CLOSING\",\n        CLOSING\n    ],\n    [\n        \"CLOSED\",\n        CLOSED\n    ]\n].forEach(function(property) {\n    Object.defineProperty(W3CWebSocket, property[0], {\n        get: function() {\n            return property[1];\n        }\n    });\n});\nW3CWebSocket.prototype.send = function(data) {\n    if (this._readyState !== OPEN) {\n        throw new Error(\"cannot call send() while not connected\");\n    }\n    // Text.\n    if (typeof data === \"string\" || data instanceof String) {\n        this._connection.sendUTF(data);\n    } else {\n        // Node Buffer.\n        if (data instanceof Buffer) {\n            this._connection.sendBytes(data);\n        } else if (data.byteLength || data.byteLength === 0) {\n            data = toBuffer(data);\n            this._connection.sendBytes(data);\n        } else {\n            throw new Error(\"unknown binary data:\", data);\n        }\n    }\n};\nW3CWebSocket.prototype.close = function(code, reason) {\n    switch(this._readyState){\n        case CONNECTING:\n            // NOTE: We don't have the WebSocketConnection instance yet so no\n            // way to close the TCP connection.\n            // Artificially invoke the onConnectFailed event.\n            onConnectFailed.call(this);\n            // And close if it connects after a while.\n            this._client.on(\"connect\", function(connection) {\n                if (code) {\n                    connection.close(code, reason);\n                } else {\n                    connection.close();\n                }\n            });\n            break;\n        case OPEN:\n            this._readyState = CLOSING;\n            if (code) {\n                this._connection.close(code, reason);\n            } else {\n                this._connection.close();\n            }\n            break;\n        case CLOSING:\n        case CLOSED:\n            break;\n    }\n};\n/**\n * Private API.\n */ function createCloseEvent(code, reason) {\n    var event = new yaeti.Event(\"close\");\n    event.code = code;\n    event.reason = reason;\n    event.wasClean = typeof code === \"undefined\" || code === 1000;\n    return event;\n}\nfunction createMessageEvent(data) {\n    var event = new yaeti.Event(\"message\");\n    event.data = data;\n    return event;\n}\nfunction onConnect(connection) {\n    var self = this;\n    this._readyState = OPEN;\n    this._connection = connection;\n    this._protocol = connection.protocol;\n    this._extensions = connection.extensions;\n    this._connection.on(\"close\", function(code, reason) {\n        onClose.call(self, code, reason);\n    });\n    this._connection.on(\"message\", function(msg) {\n        onMessage.call(self, msg);\n    });\n    this.dispatchEvent(new yaeti.Event(\"open\"));\n}\nfunction onConnectFailed() {\n    destroy.call(this);\n    this._readyState = CLOSED;\n    try {\n        this.dispatchEvent(new yaeti.Event(\"error\"));\n    } finally{\n        this.dispatchEvent(createCloseEvent(1006, \"connection failed\"));\n    }\n}\nfunction onClose(code, reason) {\n    destroy.call(this);\n    this._readyState = CLOSED;\n    this.dispatchEvent(createCloseEvent(code, reason || \"\"));\n}\nfunction onMessage(message) {\n    if (message.utf8Data) {\n        this.dispatchEvent(createMessageEvent(message.utf8Data));\n    } else if (message.binaryData) {\n        // Must convert from Node Buffer to ArrayBuffer.\n        // TODO: or to a Blob (which does not exist in Node!).\n        if (this.binaryType === \"arraybuffer\") {\n            var buffer = message.binaryData;\n            var arraybuffer = new ArrayBuffer(buffer.length);\n            var view = new Uint8Array(arraybuffer);\n            for(var i = 0, len = buffer.length; i < len; ++i){\n                view[i] = buffer[i];\n            }\n            this.dispatchEvent(createMessageEvent(arraybuffer));\n        }\n    }\n}\nfunction destroy() {\n    this._client.removeAllListeners();\n    if (this._connection) {\n        this._connection.removeAllListeners();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/websocket/lib/W3CWebSocket.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/websocket/lib/WebSocketClient.js":
/*!*******************************************************!*\
  !*** ./node_modules/websocket/lib/WebSocketClient.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/ \nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/websocket/lib/utils.js\");\nvar extend = utils.extend;\nvar util = __webpack_require__(/*! util */ \"util\");\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nvar http = __webpack_require__(/*! http */ \"http\");\nvar https = __webpack_require__(/*! https */ \"https\");\nvar url = __webpack_require__(/*! url */ \"url\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar WebSocketConnection = __webpack_require__(/*! ./WebSocketConnection */ \"(rsc)/./node_modules/websocket/lib/WebSocketConnection.js\");\nvar bufferAllocUnsafe = utils.bufferAllocUnsafe;\nvar protocolSeparators = [\n    \"(\",\n    \")\",\n    \"<\",\n    \">\",\n    \"@\",\n    \",\",\n    \";\",\n    \":\",\n    \"\\\\\",\n    '\"',\n    \"/\",\n    \"[\",\n    \"]\",\n    \"?\",\n    \"=\",\n    \"{\",\n    \"}\",\n    \" \",\n    String.fromCharCode(9)\n];\nvar excludedTlsOptions = [\n    \"hostname\",\n    \"port\",\n    \"method\",\n    \"path\",\n    \"headers\"\n];\nfunction WebSocketClient(config) {\n    // Superclass Constructor\n    EventEmitter.call(this);\n    // TODO: Implement extensions\n    this.config = {\n        // 1MiB max frame size.\n        maxReceivedFrameSize: 0x100000,\n        // 8MiB max message size, only applicable if\n        // assembleFragments is true\n        maxReceivedMessageSize: 0x800000,\n        // Outgoing messages larger than fragmentationThreshold will be\n        // split into multiple fragments.\n        fragmentOutgoingMessages: true,\n        // Outgoing frames are fragmented if they exceed this threshold.\n        // Default is 16KiB\n        fragmentationThreshold: 0x4000,\n        // Which version of the protocol to use for this session.  This\n        // option will be removed once the protocol is finalized by the IETF\n        // It is only available to ease the transition through the\n        // intermediate draft protocol versions.\n        // At present, it only affects the name of the Origin header.\n        webSocketVersion: 13,\n        // If true, fragmented messages will be automatically assembled\n        // and the full message will be emitted via a 'message' event.\n        // If false, each frame will be emitted via a 'frame' event and\n        // the application will be responsible for aggregating multiple\n        // fragmented frames.  Single-frame messages will emit a 'message'\n        // event in addition to the 'frame' event.\n        // Most users will want to leave this set to 'true'\n        assembleFragments: true,\n        // The Nagle Algorithm makes more efficient use of network resources\n        // by introducing a small delay before sending small packets so that\n        // multiple messages can be batched together before going onto the\n        // wire.  This however comes at the cost of latency, so the default\n        // is to disable it.  If you don't need low latency and are streaming\n        // lots of small messages, you can change this to 'false'\n        disableNagleAlgorithm: true,\n        // The number of milliseconds to wait after sending a close frame\n        // for an acknowledgement to come back before giving up and just\n        // closing the socket.\n        closeTimeout: 5000,\n        // Options to pass to https.connect if connecting via TLS\n        tlsOptions: {}\n    };\n    if (config) {\n        var tlsOptions;\n        if (config.tlsOptions) {\n            tlsOptions = config.tlsOptions;\n            delete config.tlsOptions;\n        } else {\n            tlsOptions = {};\n        }\n        extend(this.config, config);\n        extend(this.config.tlsOptions, tlsOptions);\n    }\n    this._req = null;\n    switch(this.config.webSocketVersion){\n        case 8:\n        case 13:\n            break;\n        default:\n            throw new Error(\"Requested webSocketVersion is not supported. Allowed values are 8 and 13.\");\n    }\n}\nutil.inherits(WebSocketClient, EventEmitter);\nWebSocketClient.prototype.connect = function(requestUrl, protocols, origin, headers, extraRequestOptions) {\n    var self = this;\n    if (typeof protocols === \"string\") {\n        if (protocols.length > 0) {\n            protocols = [\n                protocols\n            ];\n        } else {\n            protocols = [];\n        }\n    }\n    if (!(protocols instanceof Array)) {\n        protocols = [];\n    }\n    this.protocols = protocols;\n    this.origin = origin;\n    if (typeof requestUrl === \"string\") {\n        this.url = url.parse(requestUrl);\n    } else {\n        this.url = requestUrl; // in case an already parsed url is passed in.\n    }\n    if (!this.url.protocol) {\n        throw new Error(\"You must specify a full WebSocket URL, including protocol.\");\n    }\n    if (!this.url.host) {\n        throw new Error(\"You must specify a full WebSocket URL, including hostname. Relative URLs are not supported.\");\n    }\n    this.secure = this.url.protocol === \"wss:\";\n    // validate protocol characters:\n    this.protocols.forEach(function(protocol) {\n        for(var i = 0; i < protocol.length; i++){\n            var charCode = protocol.charCodeAt(i);\n            var character = protocol.charAt(i);\n            if (charCode < 0x0021 || charCode > 0x007E || protocolSeparators.indexOf(character) !== -1) {\n                throw new Error('Protocol list contains invalid character \"' + String.fromCharCode(charCode) + '\"');\n            }\n        }\n    });\n    var defaultPorts = {\n        \"ws:\": \"80\",\n        \"wss:\": \"443\"\n    };\n    if (!this.url.port) {\n        this.url.port = defaultPorts[this.url.protocol];\n    }\n    var nonce = bufferAllocUnsafe(16);\n    for(var i = 0; i < 16; i++){\n        nonce[i] = Math.round(Math.random() * 0xFF);\n    }\n    this.base64nonce = nonce.toString(\"base64\");\n    var hostHeaderValue = this.url.hostname;\n    if (this.url.protocol === \"ws:\" && this.url.port !== \"80\" || this.url.protocol === \"wss:\" && this.url.port !== \"443\") {\n        hostHeaderValue += \":\" + this.url.port;\n    }\n    var reqHeaders = {};\n    if (this.secure && this.config.tlsOptions.hasOwnProperty(\"headers\")) {\n        // Allow for additional headers to be provided when connecting via HTTPS\n        extend(reqHeaders, this.config.tlsOptions.headers);\n    }\n    if (headers) {\n        // Explicitly provided headers take priority over any from tlsOptions\n        extend(reqHeaders, headers);\n    }\n    extend(reqHeaders, {\n        \"Upgrade\": \"websocket\",\n        \"Connection\": \"Upgrade\",\n        \"Sec-WebSocket-Version\": this.config.webSocketVersion.toString(10),\n        \"Sec-WebSocket-Key\": this.base64nonce,\n        \"Host\": reqHeaders.Host || hostHeaderValue\n    });\n    if (this.protocols.length > 0) {\n        reqHeaders[\"Sec-WebSocket-Protocol\"] = this.protocols.join(\", \");\n    }\n    if (this.origin) {\n        if (this.config.webSocketVersion === 13) {\n            reqHeaders[\"Origin\"] = this.origin;\n        } else if (this.config.webSocketVersion === 8) {\n            reqHeaders[\"Sec-WebSocket-Origin\"] = this.origin;\n        }\n    }\n    // TODO: Implement extensions\n    var pathAndQuery;\n    // Ensure it begins with '/'.\n    if (this.url.pathname) {\n        pathAndQuery = this.url.path;\n    } else if (this.url.path) {\n        pathAndQuery = \"/\" + this.url.path;\n    } else {\n        pathAndQuery = \"/\";\n    }\n    function handleRequestError(error) {\n        self._req = null;\n        self.emit(\"connectFailed\", error);\n    }\n    var requestOptions = {\n        agent: false\n    };\n    if (extraRequestOptions) {\n        extend(requestOptions, extraRequestOptions);\n    }\n    // These options are always overridden by the library.  The user is not\n    // allowed to specify these directly.\n    extend(requestOptions, {\n        hostname: this.url.hostname,\n        port: this.url.port,\n        method: \"GET\",\n        path: pathAndQuery,\n        headers: reqHeaders\n    });\n    if (this.secure) {\n        var tlsOptions = this.config.tlsOptions;\n        for(var key in tlsOptions){\n            if (tlsOptions.hasOwnProperty(key) && excludedTlsOptions.indexOf(key) === -1) {\n                requestOptions[key] = tlsOptions[key];\n            }\n        }\n    }\n    var req = this._req = (this.secure ? https : http).request(requestOptions);\n    req.on(\"upgrade\", function handleRequestUpgrade(response, socket, head) {\n        self._req = null;\n        req.removeListener(\"error\", handleRequestError);\n        self.socket = socket;\n        self.response = response;\n        self.firstDataChunk = head;\n        self.validateHandshake();\n    });\n    req.on(\"error\", handleRequestError);\n    req.on(\"response\", function(response) {\n        self._req = null;\n        if (utils.eventEmitterListenerCount(self, \"httpResponse\") > 0) {\n            self.emit(\"httpResponse\", response, self);\n            if (response.socket) {\n                response.socket.end();\n            }\n        } else {\n            var headerDumpParts = [];\n            for(var headerName in response.headers){\n                headerDumpParts.push(headerName + \": \" + response.headers[headerName]);\n            }\n            self.failHandshake(\"Server responded with a non-101 status: \" + response.statusCode + \" \" + response.statusMessage + \"\\nResponse Headers Follow:\\n\" + headerDumpParts.join(\"\\n\") + \"\\n\");\n        }\n    });\n    req.end();\n};\nWebSocketClient.prototype.validateHandshake = function() {\n    var headers = this.response.headers;\n    if (this.protocols.length > 0) {\n        this.protocol = headers[\"sec-websocket-protocol\"];\n        if (this.protocol) {\n            if (this.protocols.indexOf(this.protocol) === -1) {\n                this.failHandshake(\"Server did not respond with a requested protocol.\");\n                return;\n            }\n        } else {\n            this.failHandshake(\"Expected a Sec-WebSocket-Protocol header.\");\n            return;\n        }\n    }\n    if (!(headers[\"connection\"] && headers[\"connection\"].toLocaleLowerCase() === \"upgrade\")) {\n        this.failHandshake(\"Expected a Connection: Upgrade header from the server\");\n        return;\n    }\n    if (!(headers[\"upgrade\"] && headers[\"upgrade\"].toLocaleLowerCase() === \"websocket\")) {\n        this.failHandshake(\"Expected an Upgrade: websocket header from the server\");\n        return;\n    }\n    var sha1 = crypto.createHash(\"sha1\");\n    sha1.update(this.base64nonce + \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\");\n    var expectedKey = sha1.digest(\"base64\");\n    if (!headers[\"sec-websocket-accept\"]) {\n        this.failHandshake(\"Expected Sec-WebSocket-Accept header from server\");\n        return;\n    }\n    if (headers[\"sec-websocket-accept\"] !== expectedKey) {\n        this.failHandshake(\"Sec-WebSocket-Accept header from server didn't match expected value of \" + expectedKey);\n        return;\n    }\n    // TODO: Support extensions\n    this.succeedHandshake();\n};\nWebSocketClient.prototype.failHandshake = function(errorDescription) {\n    if (this.socket && this.socket.writable) {\n        this.socket.end();\n    }\n    this.emit(\"connectFailed\", new Error(errorDescription));\n};\nWebSocketClient.prototype.succeedHandshake = function() {\n    var connection = new WebSocketConnection(this.socket, [], this.protocol, true, this.config);\n    connection.webSocketVersion = this.config.webSocketVersion;\n    connection._addSocketEventListeners();\n    this.emit(\"connect\", connection);\n    if (this.firstDataChunk.length > 0) {\n        connection.handleSocketData(this.firstDataChunk);\n    }\n    this.firstDataChunk = null;\n};\nWebSocketClient.prototype.abort = function() {\n    if (this._req) {\n        this._req.abort();\n    }\n};\nmodule.exports = WebSocketClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/websocket/lib/WebSocketClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/websocket/lib/WebSocketConnection.js":
/*!***********************************************************!*\
  !*** ./node_modules/websocket/lib/WebSocketConnection.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/ \nvar util = __webpack_require__(/*! util */ \"util\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/websocket/lib/utils.js\");\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nvar WebSocketFrame = __webpack_require__(/*! ./WebSocketFrame */ \"(rsc)/./node_modules/websocket/lib/WebSocketFrame.js\");\nvar BufferList = __webpack_require__(/*! ../vendor/FastBufferList */ \"(rsc)/./node_modules/websocket/vendor/FastBufferList.js\");\nvar isValidUTF8 = __webpack_require__(/*! utf-8-validate */ \"(rsc)/./node_modules/utf-8-validate/index.js\");\nvar bufferAllocUnsafe = utils.bufferAllocUnsafe;\nvar bufferFromString = utils.bufferFromString;\n// Connected, fully-open, ready to send and receive frames\nconst STATE_OPEN = \"open\";\n// Received a close frame from the remote peer\nconst STATE_PEER_REQUESTED_CLOSE = \"peer_requested_close\";\n// Sent close frame to remote peer.  No further data can be sent.\nconst STATE_ENDING = \"ending\";\n// Connection is fully closed.  No further data can be sent or received.\nconst STATE_CLOSED = \"closed\";\nvar setImmediateImpl = \"setImmediate\" in global ? global.setImmediate.bind(global) : process.nextTick.bind(process);\nvar idCounter = 0;\nfunction WebSocketConnection(socket, extensions, protocol, maskOutgoingPackets, config) {\n    this._debug = utils.BufferingLogger(\"websocket:connection\", ++idCounter);\n    this._debug(\"constructor\");\n    if (this._debug.enabled) {\n        instrumentSocketForDebugging(this, socket);\n    }\n    // Superclass Constructor\n    EventEmitter.call(this);\n    this._pingListenerCount = 0;\n    this.on(\"newListener\", function(ev) {\n        if (ev === \"ping\") {\n            this._pingListenerCount++;\n        }\n    }).on(\"removeListener\", function(ev) {\n        if (ev === \"ping\") {\n            this._pingListenerCount--;\n        }\n    });\n    this.config = config;\n    this.socket = socket;\n    this.protocol = protocol;\n    this.extensions = extensions;\n    this.remoteAddress = socket.remoteAddress;\n    this.closeReasonCode = -1;\n    this.closeDescription = null;\n    this.closeEventEmitted = false;\n    // We have to mask outgoing packets if we're acting as a WebSocket client.\n    this.maskOutgoingPackets = maskOutgoingPackets;\n    // We re-use the same buffers for the mask and frame header for all frames\n    // received on each connection to avoid a small memory allocation for each\n    // frame.\n    this.maskBytes = bufferAllocUnsafe(4);\n    this.frameHeader = bufferAllocUnsafe(10);\n    // the BufferList will handle the data streaming in\n    this.bufferList = new BufferList();\n    // Prepare for receiving first frame\n    this.currentFrame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n    this.fragmentationSize = 0; // data received so far...\n    this.frameQueue = [];\n    // Various bits of connection state\n    this.connected = true;\n    this.state = STATE_OPEN;\n    this.waitingForCloseResponse = false;\n    // Received TCP FIN, socket's readable stream is finished.\n    this.receivedEnd = false;\n    this.closeTimeout = this.config.closeTimeout;\n    this.assembleFragments = this.config.assembleFragments;\n    this.maxReceivedMessageSize = this.config.maxReceivedMessageSize;\n    this.outputBufferFull = false;\n    this.inputPaused = false;\n    this.receivedDataHandler = this.processReceivedData.bind(this);\n    this._closeTimerHandler = this.handleCloseTimer.bind(this);\n    // Disable nagle algorithm?\n    this.socket.setNoDelay(this.config.disableNagleAlgorithm);\n    // Make sure there is no socket inactivity timeout\n    this.socket.setTimeout(0);\n    if (this.config.keepalive && !this.config.useNativeKeepalive) {\n        if (typeof this.config.keepaliveInterval !== \"number\") {\n            throw new Error(\"keepaliveInterval must be specified and numeric \" + \"if keepalive is true.\");\n        }\n        this._keepaliveTimerHandler = this.handleKeepaliveTimer.bind(this);\n        this.setKeepaliveTimer();\n        if (this.config.dropConnectionOnKeepaliveTimeout) {\n            if (typeof this.config.keepaliveGracePeriod !== \"number\") {\n                throw new Error(\"keepaliveGracePeriod  must be specified and \" + \"numeric if dropConnectionOnKeepaliveTimeout \" + \"is true.\");\n            }\n            this._gracePeriodTimerHandler = this.handleGracePeriodTimer.bind(this);\n        }\n    } else if (this.config.keepalive && this.config.useNativeKeepalive) {\n        if (!(\"setKeepAlive\" in this.socket)) {\n            throw new Error(\"Unable to use native keepalive: unsupported by \" + \"this version of Node.\");\n        }\n        this.socket.setKeepAlive(true, this.config.keepaliveInterval);\n    }\n    // The HTTP Client seems to subscribe to socket error events\n    // and re-dispatch them in such a way that doesn't make sense\n    // for users of our client, so we want to make sure nobody\n    // else is listening for error events on the socket besides us.\n    this.socket.removeAllListeners(\"error\");\n}\nWebSocketConnection.CLOSE_REASON_NORMAL = 1000;\nWebSocketConnection.CLOSE_REASON_GOING_AWAY = 1001;\nWebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR = 1002;\nWebSocketConnection.CLOSE_REASON_UNPROCESSABLE_INPUT = 1003;\nWebSocketConnection.CLOSE_REASON_RESERVED = 1004; // Reserved value.  Undefined meaning.\nWebSocketConnection.CLOSE_REASON_NOT_PROVIDED = 1005; // Not to be used on the wire\nWebSocketConnection.CLOSE_REASON_ABNORMAL = 1006; // Not to be used on the wire\nWebSocketConnection.CLOSE_REASON_INVALID_DATA = 1007;\nWebSocketConnection.CLOSE_REASON_POLICY_VIOLATION = 1008;\nWebSocketConnection.CLOSE_REASON_MESSAGE_TOO_BIG = 1009;\nWebSocketConnection.CLOSE_REASON_EXTENSION_REQUIRED = 1010;\nWebSocketConnection.CLOSE_REASON_INTERNAL_SERVER_ERROR = 1011;\nWebSocketConnection.CLOSE_REASON_TLS_HANDSHAKE_FAILED = 1015; // Not to be used on the wire\nWebSocketConnection.CLOSE_DESCRIPTIONS = {\n    1000: \"Normal connection closure\",\n    1001: \"Remote peer is going away\",\n    1002: \"Protocol error\",\n    1003: \"Unprocessable input\",\n    1004: \"Reserved\",\n    1005: \"Reason not provided\",\n    1006: \"Abnormal closure, no further detail available\",\n    1007: \"Invalid data received\",\n    1008: \"Policy violation\",\n    1009: \"Message too big\",\n    1010: \"Extension requested by client is required\",\n    1011: \"Internal Server Error\",\n    1015: \"TLS Handshake Failed\"\n};\nfunction validateCloseReason(code) {\n    if (code < 1000) {\n        // Status codes in the range 0-999 are not used\n        return false;\n    }\n    if (code >= 1000 && code <= 2999) {\n        // Codes from 1000 - 2999 are reserved for use by the protocol.  Only\n        // a few codes are defined, all others are currently illegal.\n        return [\n            1000,\n            1001,\n            1002,\n            1003,\n            1007,\n            1008,\n            1009,\n            1010,\n            1011,\n            1012,\n            1013,\n            1014,\n            1015\n        ].indexOf(code) !== -1;\n    }\n    if (code >= 3000 && code <= 3999) {\n        // Reserved for use by libraries, frameworks, and applications.\n        // Should be registered with IANA.  Interpretation of these codes is\n        // undefined by the WebSocket protocol.\n        return true;\n    }\n    if (code >= 4000 && code <= 4999) {\n        // Reserved for private use.  Interpretation of these codes is\n        // undefined by the WebSocket protocol.\n        return true;\n    }\n    if (code >= 5000) {\n        return false;\n    }\n}\nutil.inherits(WebSocketConnection, EventEmitter);\nWebSocketConnection.prototype._addSocketEventListeners = function() {\n    this.socket.on(\"error\", this.handleSocketError.bind(this));\n    this.socket.on(\"end\", this.handleSocketEnd.bind(this));\n    this.socket.on(\"close\", this.handleSocketClose.bind(this));\n    this.socket.on(\"drain\", this.handleSocketDrain.bind(this));\n    this.socket.on(\"pause\", this.handleSocketPause.bind(this));\n    this.socket.on(\"resume\", this.handleSocketResume.bind(this));\n    this.socket.on(\"data\", this.handleSocketData.bind(this));\n};\n// set or reset the keepalive timer when data is received.\nWebSocketConnection.prototype.setKeepaliveTimer = function() {\n    this._debug(\"setKeepaliveTimer\");\n    if (!this.config.keepalive || this.config.useNativeKeepalive) {\n        return;\n    }\n    this.clearKeepaliveTimer();\n    this.clearGracePeriodTimer();\n    this._keepaliveTimeoutID = setTimeout(this._keepaliveTimerHandler, this.config.keepaliveInterval);\n};\nWebSocketConnection.prototype.clearKeepaliveTimer = function() {\n    if (this._keepaliveTimeoutID) {\n        clearTimeout(this._keepaliveTimeoutID);\n    }\n};\n// No data has been received within config.keepaliveTimeout ms.\nWebSocketConnection.prototype.handleKeepaliveTimer = function() {\n    this._debug(\"handleKeepaliveTimer\");\n    this._keepaliveTimeoutID = null;\n    this.ping();\n    // If we are configured to drop connections if the client doesn't respond\n    // then set the grace period timer.\n    if (this.config.dropConnectionOnKeepaliveTimeout) {\n        this.setGracePeriodTimer();\n    } else {\n        // Otherwise reset the keepalive timer to send the next ping.\n        this.setKeepaliveTimer();\n    }\n};\nWebSocketConnection.prototype.setGracePeriodTimer = function() {\n    this._debug(\"setGracePeriodTimer\");\n    this.clearGracePeriodTimer();\n    this._gracePeriodTimeoutID = setTimeout(this._gracePeriodTimerHandler, this.config.keepaliveGracePeriod);\n};\nWebSocketConnection.prototype.clearGracePeriodTimer = function() {\n    if (this._gracePeriodTimeoutID) {\n        clearTimeout(this._gracePeriodTimeoutID);\n    }\n};\nWebSocketConnection.prototype.handleGracePeriodTimer = function() {\n    this._debug(\"handleGracePeriodTimer\");\n    // If this is called, the client has not responded and is assumed dead.\n    this._gracePeriodTimeoutID = null;\n    this.drop(WebSocketConnection.CLOSE_REASON_ABNORMAL, \"Peer not responding.\", true);\n};\nWebSocketConnection.prototype.handleSocketData = function(data) {\n    this._debug(\"handleSocketData\");\n    // Reset the keepalive timer when receiving data of any kind.\n    this.setKeepaliveTimer();\n    // Add received data to our bufferList, which efficiently holds received\n    // data chunks in a linked list of Buffer objects.\n    this.bufferList.write(data);\n    this.processReceivedData();\n};\nWebSocketConnection.prototype.processReceivedData = function() {\n    this._debug(\"processReceivedData\");\n    // If we're not connected, we should ignore any data remaining on the buffer.\n    if (!this.connected) {\n        return;\n    }\n    // Receiving/parsing is expected to be halted when paused.\n    if (this.inputPaused) {\n        return;\n    }\n    var frame = this.currentFrame;\n    // WebSocketFrame.prototype.addData returns true if all data necessary to\n    // parse the frame was available.  It returns false if we are waiting for\n    // more data to come in on the wire.\n    if (!frame.addData(this.bufferList)) {\n        this._debug(\"-- insufficient data for frame\");\n        return;\n    }\n    var self = this;\n    // Handle possible parsing errors\n    if (frame.protocolError) {\n        // Something bad happened.. get rid of this client.\n        this._debug(\"-- protocol error\");\n        process.nextTick(function() {\n            self.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR, frame.dropReason);\n        });\n        return;\n    } else if (frame.frameTooLarge) {\n        this._debug(\"-- frame too large\");\n        process.nextTick(function() {\n            self.drop(WebSocketConnection.CLOSE_REASON_MESSAGE_TOO_BIG, frame.dropReason);\n        });\n        return;\n    }\n    // For now since we don't support extensions, all RSV bits are illegal\n    if (frame.rsv1 || frame.rsv2 || frame.rsv3) {\n        this._debug(\"-- illegal rsv flag\");\n        process.nextTick(function() {\n            self.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR, \"Unsupported usage of rsv bits without negotiated extension.\");\n        });\n        return;\n    }\n    if (!this.assembleFragments) {\n        this._debug(\"-- emitting frame\");\n        process.nextTick(function() {\n            self.emit(\"frame\", frame);\n        });\n    }\n    process.nextTick(function() {\n        self.processFrame(frame);\n    });\n    this.currentFrame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n    // If there's data remaining, schedule additional processing, but yield\n    // for now so that other connections have a chance to have their data\n    // processed.  We use setImmediate here instead of process.nextTick to\n    // explicitly indicate that we wish for other I/O to be handled first.\n    if (this.bufferList.length > 0) {\n        setImmediateImpl(this.receivedDataHandler);\n    }\n};\nWebSocketConnection.prototype.handleSocketError = function(error) {\n    this._debug(\"handleSocketError: %j\", error);\n    if (this.state === STATE_CLOSED) {\n        // See https://github.com/theturtle32/WebSocket-Node/issues/288\n        this._debug(\"  --- Socket 'error' after 'close'\");\n        return;\n    }\n    this.closeReasonCode = WebSocketConnection.CLOSE_REASON_ABNORMAL;\n    this.closeDescription = \"Socket Error: \" + error.syscall + \" \" + error.code;\n    this.connected = false;\n    this.state = STATE_CLOSED;\n    this.fragmentationSize = 0;\n    if (utils.eventEmitterListenerCount(this, \"error\") > 0) {\n        this.emit(\"error\", error);\n    }\n    this.socket.destroy();\n    this._debug.printOutput();\n};\nWebSocketConnection.prototype.handleSocketEnd = function() {\n    this._debug(\"handleSocketEnd: received socket end.  state = %s\", this.state);\n    this.receivedEnd = true;\n    if (this.state === STATE_CLOSED) {\n        // When using the TLS module, sometimes the socket will emit 'end'\n        // after it emits 'close'.  I don't think that's correct behavior,\n        // but we should deal with it gracefully by ignoring it.\n        this._debug(\"  --- Socket 'end' after 'close'\");\n        return;\n    }\n    if (this.state !== STATE_PEER_REQUESTED_CLOSE && this.state !== STATE_ENDING) {\n        this._debug(\"  --- UNEXPECTED socket end.\");\n        this.socket.end();\n    }\n};\nWebSocketConnection.prototype.handleSocketClose = function(hadError) {\n    this._debug(\"handleSocketClose: received socket close\");\n    this.socketHadError = hadError;\n    this.connected = false;\n    this.state = STATE_CLOSED;\n    // If closeReasonCode is still set to -1 at this point then we must\n    // not have received a close frame!!\n    if (this.closeReasonCode === -1) {\n        this.closeReasonCode = WebSocketConnection.CLOSE_REASON_ABNORMAL;\n        this.closeDescription = \"Connection dropped by remote peer.\";\n    }\n    this.clearCloseTimer();\n    this.clearKeepaliveTimer();\n    this.clearGracePeriodTimer();\n    if (!this.closeEventEmitted) {\n        this.closeEventEmitted = true;\n        this._debug(\"-- Emitting WebSocketConnection close event\");\n        this.emit(\"close\", this.closeReasonCode, this.closeDescription);\n    }\n};\nWebSocketConnection.prototype.handleSocketDrain = function() {\n    this._debug(\"handleSocketDrain: socket drain event\");\n    this.outputBufferFull = false;\n    this.emit(\"drain\");\n};\nWebSocketConnection.prototype.handleSocketPause = function() {\n    this._debug(\"handleSocketPause: socket pause event\");\n    this.inputPaused = true;\n    this.emit(\"pause\");\n};\nWebSocketConnection.prototype.handleSocketResume = function() {\n    this._debug(\"handleSocketResume: socket resume event\");\n    this.inputPaused = false;\n    this.emit(\"resume\");\n    this.processReceivedData();\n};\nWebSocketConnection.prototype.pause = function() {\n    this._debug(\"pause: pause requested\");\n    this.socket.pause();\n};\nWebSocketConnection.prototype.resume = function() {\n    this._debug(\"resume: resume requested\");\n    this.socket.resume();\n};\nWebSocketConnection.prototype.close = function(reasonCode, description) {\n    if (this.connected) {\n        this._debug(\"close: Initating clean WebSocket close sequence.\");\n        if (\"number\" !== typeof reasonCode) {\n            reasonCode = WebSocketConnection.CLOSE_REASON_NORMAL;\n        }\n        if (!validateCloseReason(reasonCode)) {\n            throw new Error(\"Close code \" + reasonCode + \" is not valid.\");\n        }\n        if (\"string\" !== typeof description) {\n            description = WebSocketConnection.CLOSE_DESCRIPTIONS[reasonCode];\n        }\n        this.closeReasonCode = reasonCode;\n        this.closeDescription = description;\n        this.setCloseTimer();\n        this.sendCloseFrame(this.closeReasonCode, this.closeDescription);\n        this.state = STATE_ENDING;\n        this.connected = false;\n    }\n};\nWebSocketConnection.prototype.drop = function(reasonCode, description, skipCloseFrame) {\n    this._debug(\"drop\");\n    if (typeof reasonCode !== \"number\") {\n        reasonCode = WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR;\n    }\n    if (typeof description !== \"string\") {\n        // If no description is provided, try to look one up based on the\n        // specified reasonCode.\n        description = WebSocketConnection.CLOSE_DESCRIPTIONS[reasonCode];\n    }\n    this._debug(\"Forcefully dropping connection. skipCloseFrame: %s, code: %d, description: %s\", skipCloseFrame, reasonCode, description);\n    this.closeReasonCode = reasonCode;\n    this.closeDescription = description;\n    this.frameQueue = [];\n    this.fragmentationSize = 0;\n    if (!skipCloseFrame) {\n        this.sendCloseFrame(reasonCode, description);\n    }\n    this.connected = false;\n    this.state = STATE_CLOSED;\n    this.clearCloseTimer();\n    this.clearKeepaliveTimer();\n    this.clearGracePeriodTimer();\n    if (!this.closeEventEmitted) {\n        this.closeEventEmitted = true;\n        this._debug(\"Emitting WebSocketConnection close event\");\n        this.emit(\"close\", this.closeReasonCode, this.closeDescription);\n    }\n    this._debug(\"Drop: destroying socket\");\n    this.socket.destroy();\n};\nWebSocketConnection.prototype.setCloseTimer = function() {\n    this._debug(\"setCloseTimer\");\n    this.clearCloseTimer();\n    this._debug(\"Setting close timer\");\n    this.waitingForCloseResponse = true;\n    this.closeTimer = setTimeout(this._closeTimerHandler, this.closeTimeout);\n};\nWebSocketConnection.prototype.clearCloseTimer = function() {\n    this._debug(\"clearCloseTimer\");\n    if (this.closeTimer) {\n        this._debug(\"Clearing close timer\");\n        clearTimeout(this.closeTimer);\n        this.waitingForCloseResponse = false;\n        this.closeTimer = null;\n    }\n};\nWebSocketConnection.prototype.handleCloseTimer = function() {\n    this._debug(\"handleCloseTimer\");\n    this.closeTimer = null;\n    if (this.waitingForCloseResponse) {\n        this._debug(\"Close response not received from client.  Forcing socket end.\");\n        this.waitingForCloseResponse = false;\n        this.state = STATE_CLOSED;\n        this.socket.end();\n    }\n};\nWebSocketConnection.prototype.processFrame = function(frame) {\n    this._debug(\"processFrame\");\n    this._debug(\" -- frame: %s\", frame);\n    // Any non-control opcode besides 0x00 (continuation) received in the\n    // middle of a fragmented message is illegal.\n    if (this.frameQueue.length !== 0 && frame.opcode > 0x00 && frame.opcode < 0x08) {\n        this.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR, \"Illegal frame opcode 0x\" + frame.opcode.toString(16) + \" \" + \"received in middle of fragmented message.\");\n        return;\n    }\n    switch(frame.opcode){\n        case 0x02:\n            this._debug(\"-- Binary Frame\");\n            if (this.assembleFragments) {\n                if (frame.fin) {\n                    // Complete single-frame message received\n                    this._debug(\"---- Emitting 'message' event\");\n                    this.emit(\"message\", {\n                        type: \"binary\",\n                        binaryData: frame.binaryPayload\n                    });\n                } else {\n                    // beginning of a fragmented message\n                    this.frameQueue.push(frame);\n                    this.fragmentationSize = frame.length;\n                }\n            }\n            break;\n        case 0x01:\n            this._debug(\"-- Text Frame\");\n            if (this.assembleFragments) {\n                if (frame.fin) {\n                    if (!isValidUTF8(frame.binaryPayload)) {\n                        this.drop(WebSocketConnection.CLOSE_REASON_INVALID_DATA, \"Invalid UTF-8 Data Received\");\n                        return;\n                    }\n                    // Complete single-frame message received\n                    this._debug(\"---- Emitting 'message' event\");\n                    this.emit(\"message\", {\n                        type: \"utf8\",\n                        utf8Data: frame.binaryPayload.toString(\"utf8\")\n                    });\n                } else {\n                    // beginning of a fragmented message\n                    this.frameQueue.push(frame);\n                    this.fragmentationSize = frame.length;\n                }\n            }\n            break;\n        case 0x00:\n            this._debug(\"-- Continuation Frame\");\n            if (this.assembleFragments) {\n                if (this.frameQueue.length === 0) {\n                    this.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR, \"Unexpected Continuation Frame\");\n                    return;\n                }\n                this.fragmentationSize += frame.length;\n                if (this.fragmentationSize > this.maxReceivedMessageSize) {\n                    this.drop(WebSocketConnection.CLOSE_REASON_MESSAGE_TOO_BIG, \"Maximum message size exceeded.\");\n                    return;\n                }\n                this.frameQueue.push(frame);\n                if (frame.fin) {\n                    // end of fragmented message, so we process the whole\n                    // message now.  We also have to decode the utf-8 data\n                    // for text frames after combining all the fragments.\n                    var bytesCopied = 0;\n                    var binaryPayload = bufferAllocUnsafe(this.fragmentationSize);\n                    var opcode = this.frameQueue[0].opcode;\n                    this.frameQueue.forEach(function(currentFrame) {\n                        currentFrame.binaryPayload.copy(binaryPayload, bytesCopied);\n                        bytesCopied += currentFrame.binaryPayload.length;\n                    });\n                    this.frameQueue = [];\n                    this.fragmentationSize = 0;\n                    switch(opcode){\n                        case 0x02:\n                            this.emit(\"message\", {\n                                type: \"binary\",\n                                binaryData: binaryPayload\n                            });\n                            break;\n                        case 0x01:\n                            if (!isValidUTF8(binaryPayload)) {\n                                this.drop(WebSocketConnection.CLOSE_REASON_INVALID_DATA, \"Invalid UTF-8 Data Received\");\n                                return;\n                            }\n                            this.emit(\"message\", {\n                                type: \"utf8\",\n                                utf8Data: binaryPayload.toString(\"utf8\")\n                            });\n                            break;\n                        default:\n                            this.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR, \"Unexpected first opcode in fragmentation sequence: 0x\" + opcode.toString(16));\n                            return;\n                    }\n                }\n            }\n            break;\n        case 0x09:\n            this._debug(\"-- Ping Frame\");\n            if (this._pingListenerCount > 0) {\n                // logic to emit the ping frame: this is only done when a listener is known to exist\n                // Expose a function allowing the user to override the default ping() behavior\n                var cancelled = false;\n                var cancel = function() {\n                    cancelled = true;\n                };\n                this.emit(\"ping\", cancel, frame.binaryPayload);\n                // Only send a pong if the client did not indicate that he would like to cancel\n                if (!cancelled) {\n                    this.pong(frame.binaryPayload);\n                }\n            } else {\n                this.pong(frame.binaryPayload);\n            }\n            break;\n        case 0x0A:\n            this._debug(\"-- Pong Frame\");\n            this.emit(\"pong\", frame.binaryPayload);\n            break;\n        case 0x08:\n            this._debug(\"-- Close Frame\");\n            if (this.waitingForCloseResponse) {\n                // Got response to our request to close the connection.\n                // Close is complete, so we just hang up.\n                this._debug(\"---- Got close response from peer.  Completing closing handshake.\");\n                this.clearCloseTimer();\n                this.waitingForCloseResponse = false;\n                this.state = STATE_CLOSED;\n                this.socket.end();\n                return;\n            }\n            this._debug(\"---- Closing handshake initiated by peer.\");\n            // Got request from other party to close connection.\n            // Send back acknowledgement and then hang up.\n            this.state = STATE_PEER_REQUESTED_CLOSE;\n            var respondCloseReasonCode;\n            // Make sure the close reason provided is legal according to\n            // the protocol spec.  Providing no close status is legal.\n            // WebSocketFrame sets closeStatus to -1 by default, so if it\n            // is still -1, then no status was provided.\n            if (frame.invalidCloseFrameLength) {\n                this.closeReasonCode = 1005; // 1005 = No reason provided.\n                respondCloseReasonCode = WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR;\n            } else if (frame.closeStatus === -1 || validateCloseReason(frame.closeStatus)) {\n                this.closeReasonCode = frame.closeStatus;\n                respondCloseReasonCode = WebSocketConnection.CLOSE_REASON_NORMAL;\n            } else {\n                this.closeReasonCode = frame.closeStatus;\n                respondCloseReasonCode = WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR;\n            }\n            // If there is a textual description in the close frame, extract it.\n            if (frame.binaryPayload.length > 1) {\n                if (!isValidUTF8(frame.binaryPayload)) {\n                    this.drop(WebSocketConnection.CLOSE_REASON_INVALID_DATA, \"Invalid UTF-8 Data Received\");\n                    return;\n                }\n                this.closeDescription = frame.binaryPayload.toString(\"utf8\");\n            } else {\n                this.closeDescription = WebSocketConnection.CLOSE_DESCRIPTIONS[this.closeReasonCode];\n            }\n            this._debug(\"------ Remote peer %s - code: %d - %s - close frame payload length: %d\", this.remoteAddress, this.closeReasonCode, this.closeDescription, frame.length);\n            this._debug(\"------ responding to remote peer's close request.\");\n            this.sendCloseFrame(respondCloseReasonCode, null);\n            this.connected = false;\n            break;\n        default:\n            this._debug(\"-- Unrecognized Opcode %d\", frame.opcode);\n            this.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR, \"Unrecognized Opcode: 0x\" + frame.opcode.toString(16));\n            break;\n    }\n};\nWebSocketConnection.prototype.send = function(data, cb) {\n    this._debug(\"send\");\n    if (Buffer.isBuffer(data)) {\n        this.sendBytes(data, cb);\n    } else if (typeof data[\"toString\"] === \"function\") {\n        this.sendUTF(data, cb);\n    } else {\n        throw new Error(\"Data provided must either be a Node Buffer or implement toString()\");\n    }\n};\nWebSocketConnection.prototype.sendUTF = function(data, cb) {\n    data = bufferFromString(data.toString(), \"utf8\");\n    this._debug(\"sendUTF: %d bytes\", data.length);\n    var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n    frame.opcode = 0x01; // WebSocketOpcode.TEXT_FRAME\n    frame.binaryPayload = data;\n    this.fragmentAndSend(frame, cb);\n};\nWebSocketConnection.prototype.sendBytes = function(data, cb) {\n    this._debug(\"sendBytes\");\n    if (!Buffer.isBuffer(data)) {\n        throw new Error(\"You must pass a Node Buffer object to WebSocketConnection.prototype.sendBytes()\");\n    }\n    var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n    frame.opcode = 0x02; // WebSocketOpcode.BINARY_FRAME\n    frame.binaryPayload = data;\n    this.fragmentAndSend(frame, cb);\n};\nWebSocketConnection.prototype.ping = function(data) {\n    this._debug(\"ping\");\n    var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n    frame.opcode = 0x09; // WebSocketOpcode.PING\n    frame.fin = true;\n    if (data) {\n        if (!Buffer.isBuffer(data)) {\n            data = bufferFromString(data.toString(), \"utf8\");\n        }\n        if (data.length > 125) {\n            this._debug(\"WebSocket: Data for ping is longer than 125 bytes.  Truncating.\");\n            data = data.slice(0, 124);\n        }\n        frame.binaryPayload = data;\n    }\n    this.sendFrame(frame);\n};\n// Pong frames have to echo back the contents of the data portion of the\n// ping frame exactly, byte for byte.\nWebSocketConnection.prototype.pong = function(binaryPayload) {\n    this._debug(\"pong\");\n    var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n    frame.opcode = 0x0A; // WebSocketOpcode.PONG\n    if (Buffer.isBuffer(binaryPayload) && binaryPayload.length > 125) {\n        this._debug(\"WebSocket: Data for pong is longer than 125 bytes.  Truncating.\");\n        binaryPayload = binaryPayload.slice(0, 124);\n    }\n    frame.binaryPayload = binaryPayload;\n    frame.fin = true;\n    this.sendFrame(frame);\n};\nWebSocketConnection.prototype.fragmentAndSend = function(frame, cb) {\n    this._debug(\"fragmentAndSend\");\n    if (frame.opcode > 0x07) {\n        throw new Error(\"You cannot fragment control frames.\");\n    }\n    var threshold = this.config.fragmentationThreshold;\n    var length = frame.binaryPayload.length;\n    // Send immediately if fragmentation is disabled or the message is not\n    // larger than the fragmentation threshold.\n    if (!this.config.fragmentOutgoingMessages || frame.binaryPayload && length <= threshold) {\n        frame.fin = true;\n        this.sendFrame(frame, cb);\n        return;\n    }\n    var numFragments = Math.ceil(length / threshold);\n    var sentFragments = 0;\n    var sentCallback = function fragmentSentCallback(err) {\n        if (err) {\n            if (typeof cb === \"function\") {\n                // pass only the first error\n                cb(err);\n                cb = null;\n            }\n            return;\n        }\n        ++sentFragments;\n        if (sentFragments === numFragments && typeof cb === \"function\") {\n            cb();\n        }\n    };\n    for(var i = 1; i <= numFragments; i++){\n        var currentFrame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n        // continuation opcode except for first frame.\n        currentFrame.opcode = i === 1 ? frame.opcode : 0x00;\n        // fin set on last frame only\n        currentFrame.fin = i === numFragments;\n        // length is likely to be shorter on the last fragment\n        var currentLength = i === numFragments ? length - threshold * (i - 1) : threshold;\n        var sliceStart = threshold * (i - 1);\n        // Slice the right portion of the original payload\n        currentFrame.binaryPayload = frame.binaryPayload.slice(sliceStart, sliceStart + currentLength);\n        this.sendFrame(currentFrame, sentCallback);\n    }\n};\nWebSocketConnection.prototype.sendCloseFrame = function(reasonCode, description, cb) {\n    if (typeof reasonCode !== \"number\") {\n        reasonCode = WebSocketConnection.CLOSE_REASON_NORMAL;\n    }\n    this._debug(\"sendCloseFrame state: %s, reasonCode: %d, description: %s\", this.state, reasonCode, description);\n    if (this.state !== STATE_OPEN && this.state !== STATE_PEER_REQUESTED_CLOSE) {\n        return;\n    }\n    var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n    frame.fin = true;\n    frame.opcode = 0x08; // WebSocketOpcode.CONNECTION_CLOSE\n    frame.closeStatus = reasonCode;\n    if (typeof description === \"string\") {\n        frame.binaryPayload = bufferFromString(description, \"utf8\");\n    }\n    this.sendFrame(frame, cb);\n    this.socket.end();\n};\nWebSocketConnection.prototype.sendFrame = function(frame, cb) {\n    this._debug(\"sendFrame\");\n    frame.mask = this.maskOutgoingPackets;\n    var flushed = this.socket.write(frame.toBuffer(), cb);\n    this.outputBufferFull = !flushed;\n    return flushed;\n};\nmodule.exports = WebSocketConnection;\nfunction instrumentSocketForDebugging(connection, socket) {\n    /* jshint loopfunc: true */ if (!connection._debug.enabled) {\n        return;\n    }\n    var originalSocketEmit = socket.emit;\n    socket.emit = function(event) {\n        connection._debug(\"||| Socket Event  '%s'\", event);\n        originalSocketEmit.apply(this, arguments);\n    };\n    for(var key in socket){\n        if (\"function\" !== typeof socket[key]) {\n            continue;\n        }\n        if ([\n            \"emit\"\n        ].indexOf(key) !== -1) {\n            continue;\n        }\n        (function(key) {\n            var original = socket[key];\n            if (key === \"on\") {\n                socket[key] = function proxyMethod__EventEmitter__On() {\n                    connection._debug(\"||| Socket method called:  %s (%s)\", key, arguments[0]);\n                    return original.apply(this, arguments);\n                };\n                return;\n            }\n            socket[key] = function proxyMethod() {\n                connection._debug(\"||| Socket method called:  %s\", key);\n                return original.apply(this, arguments);\n            };\n        })(key);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/websocket/lib/WebSocketConnection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/websocket/lib/WebSocketFrame.js":
/*!******************************************************!*\
  !*** ./node_modules/websocket/lib/WebSocketFrame.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/ \nvar bufferUtil = __webpack_require__(/*! bufferutil */ \"(rsc)/./node_modules/bufferutil/index.js\");\nvar bufferAllocUnsafe = (__webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/websocket/lib/utils.js\").bufferAllocUnsafe);\nconst DECODE_HEADER = 1;\nconst WAITING_FOR_16_BIT_LENGTH = 2;\nconst WAITING_FOR_64_BIT_LENGTH = 3;\nconst WAITING_FOR_MASK_KEY = 4;\nconst WAITING_FOR_PAYLOAD = 5;\nconst COMPLETE = 6;\n// WebSocketConnection will pass shared buffer objects for maskBytes and\n// frameHeader into the constructor to avoid tons of small memory allocations\n// for each frame we have to parse.  This is only used for parsing frames\n// we receive off the wire.\nfunction WebSocketFrame(maskBytes, frameHeader, config) {\n    this.maskBytes = maskBytes;\n    this.frameHeader = frameHeader;\n    this.config = config;\n    this.maxReceivedFrameSize = config.maxReceivedFrameSize;\n    this.protocolError = false;\n    this.frameTooLarge = false;\n    this.invalidCloseFrameLength = false;\n    this.parseState = DECODE_HEADER;\n    this.closeStatus = -1;\n}\nWebSocketFrame.prototype.addData = function(bufferList) {\n    if (this.parseState === DECODE_HEADER) {\n        if (bufferList.length >= 2) {\n            bufferList.joinInto(this.frameHeader, 0, 0, 2);\n            bufferList.advance(2);\n            var firstByte = this.frameHeader[0];\n            var secondByte = this.frameHeader[1];\n            this.fin = Boolean(firstByte & 0x80);\n            this.rsv1 = Boolean(firstByte & 0x40);\n            this.rsv2 = Boolean(firstByte & 0x20);\n            this.rsv3 = Boolean(firstByte & 0x10);\n            this.mask = Boolean(secondByte & 0x80);\n            this.opcode = firstByte & 0x0F;\n            this.length = secondByte & 0x7F;\n            // Control frame sanity check\n            if (this.opcode >= 0x08) {\n                if (this.length > 125) {\n                    this.protocolError = true;\n                    this.dropReason = \"Illegal control frame longer than 125 bytes.\";\n                    return true;\n                }\n                if (!this.fin) {\n                    this.protocolError = true;\n                    this.dropReason = \"Control frames must not be fragmented.\";\n                    return true;\n                }\n            }\n            if (this.length === 126) {\n                this.parseState = WAITING_FOR_16_BIT_LENGTH;\n            } else if (this.length === 127) {\n                this.parseState = WAITING_FOR_64_BIT_LENGTH;\n            } else {\n                this.parseState = WAITING_FOR_MASK_KEY;\n            }\n        }\n    }\n    if (this.parseState === WAITING_FOR_16_BIT_LENGTH) {\n        if (bufferList.length >= 2) {\n            bufferList.joinInto(this.frameHeader, 2, 0, 2);\n            bufferList.advance(2);\n            this.length = this.frameHeader.readUInt16BE(2);\n            this.parseState = WAITING_FOR_MASK_KEY;\n        }\n    } else if (this.parseState === WAITING_FOR_64_BIT_LENGTH) {\n        if (bufferList.length >= 8) {\n            bufferList.joinInto(this.frameHeader, 2, 0, 8);\n            bufferList.advance(8);\n            var lengthPair = [\n                this.frameHeader.readUInt32BE(2),\n                this.frameHeader.readUInt32BE(2 + 4)\n            ];\n            if (lengthPair[0] !== 0) {\n                this.protocolError = true;\n                this.dropReason = \"Unsupported 64-bit length frame received\";\n                return true;\n            }\n            this.length = lengthPair[1];\n            this.parseState = WAITING_FOR_MASK_KEY;\n        }\n    }\n    if (this.parseState === WAITING_FOR_MASK_KEY) {\n        if (this.mask) {\n            if (bufferList.length >= 4) {\n                bufferList.joinInto(this.maskBytes, 0, 0, 4);\n                bufferList.advance(4);\n                this.parseState = WAITING_FOR_PAYLOAD;\n            }\n        } else {\n            this.parseState = WAITING_FOR_PAYLOAD;\n        }\n    }\n    if (this.parseState === WAITING_FOR_PAYLOAD) {\n        if (this.length > this.maxReceivedFrameSize) {\n            this.frameTooLarge = true;\n            this.dropReason = \"Frame size of \" + this.length.toString(10) + \" bytes exceeds maximum accepted frame size\";\n            return true;\n        }\n        if (this.length === 0) {\n            this.binaryPayload = bufferAllocUnsafe(0);\n            this.parseState = COMPLETE;\n            return true;\n        }\n        if (bufferList.length >= this.length) {\n            this.binaryPayload = bufferList.take(this.length);\n            bufferList.advance(this.length);\n            if (this.mask) {\n                bufferUtil.unmask(this.binaryPayload, this.maskBytes);\n            // xor(this.binaryPayload, this.maskBytes, 0);\n            }\n            if (this.opcode === 0x08) {\n                if (this.length === 1) {\n                    // Invalid length for a close frame.  Must be zero or at least two.\n                    this.binaryPayload = bufferAllocUnsafe(0);\n                    this.invalidCloseFrameLength = true;\n                }\n                if (this.length >= 2) {\n                    this.closeStatus = this.binaryPayload.readUInt16BE(0);\n                    this.binaryPayload = this.binaryPayload.slice(2);\n                }\n            }\n            this.parseState = COMPLETE;\n            return true;\n        }\n    }\n    return false;\n};\nWebSocketFrame.prototype.throwAwayPayload = function(bufferList) {\n    if (bufferList.length >= this.length) {\n        bufferList.advance(this.length);\n        this.parseState = COMPLETE;\n        return true;\n    }\n    return false;\n};\nWebSocketFrame.prototype.toBuffer = function(nullMask) {\n    var maskKey;\n    var headerLength = 2;\n    var data;\n    var outputPos;\n    var firstByte = 0x00;\n    var secondByte = 0x00;\n    if (this.fin) {\n        firstByte |= 0x80;\n    }\n    if (this.rsv1) {\n        firstByte |= 0x40;\n    }\n    if (this.rsv2) {\n        firstByte |= 0x20;\n    }\n    if (this.rsv3) {\n        firstByte |= 0x10;\n    }\n    if (this.mask) {\n        secondByte |= 0x80;\n    }\n    firstByte |= this.opcode & 0x0F;\n    // the close frame is a special case because the close reason is\n    // prepended to the payload data.\n    if (this.opcode === 0x08) {\n        this.length = 2;\n        if (this.binaryPayload) {\n            this.length += this.binaryPayload.length;\n        }\n        data = bufferAllocUnsafe(this.length);\n        data.writeUInt16BE(this.closeStatus, 0);\n        if (this.length > 2) {\n            this.binaryPayload.copy(data, 2);\n        }\n    } else if (this.binaryPayload) {\n        data = this.binaryPayload;\n        this.length = data.length;\n    } else {\n        this.length = 0;\n    }\n    if (this.length <= 125) {\n        // encode the length directly into the two-byte frame header\n        secondByte |= this.length & 0x7F;\n    } else if (this.length > 125 && this.length <= 0xFFFF) {\n        // Use 16-bit length\n        secondByte |= 126;\n        headerLength += 2;\n    } else if (this.length > 0xFFFF) {\n        // Use 64-bit length\n        secondByte |= 127;\n        headerLength += 8;\n    }\n    var output = bufferAllocUnsafe(this.length + headerLength + (this.mask ? 4 : 0));\n    // write the frame header\n    output[0] = firstByte;\n    output[1] = secondByte;\n    outputPos = 2;\n    if (this.length > 125 && this.length <= 0xFFFF) {\n        // write 16-bit length\n        output.writeUInt16BE(this.length, outputPos);\n        outputPos += 2;\n    } else if (this.length > 0xFFFF) {\n        // write 64-bit length\n        output.writeUInt32BE(0x00000000, outputPos);\n        output.writeUInt32BE(this.length, outputPos + 4);\n        outputPos += 8;\n    }\n    if (this.mask) {\n        maskKey = nullMask ? 0 : Math.random() * 0xFFFFFFFF >>> 0;\n        this.maskBytes.writeUInt32BE(maskKey, 0);\n        // write the mask key\n        this.maskBytes.copy(output, outputPos);\n        outputPos += 4;\n        if (data) {\n            bufferUtil.mask(data, this.maskBytes, output, outputPos, this.length);\n        }\n    } else if (data) {\n        data.copy(output, outputPos);\n    }\n    return output;\n};\nWebSocketFrame.prototype.toString = function() {\n    return \"Opcode: \" + this.opcode + \", fin: \" + this.fin + \", length: \" + this.length + \", hasPayload: \" + Boolean(this.binaryPayload) + \", masked: \" + this.mask;\n};\nmodule.exports = WebSocketFrame;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/websocket/lib/WebSocketFrame.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/websocket/lib/WebSocketRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/websocket/lib/WebSocketRequest.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/ \nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar url = __webpack_require__(/*! url */ \"url\");\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nvar WebSocketConnection = __webpack_require__(/*! ./WebSocketConnection */ \"(rsc)/./node_modules/websocket/lib/WebSocketConnection.js\");\nvar headerValueSplitRegExp = /,\\s*/;\nvar headerParamSplitRegExp = /;\\s*/;\nvar headerSanitizeRegExp = /[\\r\\n]/g;\nvar xForwardedForSeparatorRegExp = /,\\s*/;\nvar separators = [\n    \"(\",\n    \")\",\n    \"<\",\n    \">\",\n    \"@\",\n    \",\",\n    \";\",\n    \":\",\n    \"\\\\\",\n    '\"',\n    \"/\",\n    \"[\",\n    \"]\",\n    \"?\",\n    \"=\",\n    \"{\",\n    \"}\",\n    \" \",\n    String.fromCharCode(9)\n];\nvar controlChars = [\n    String.fromCharCode(127)\n];\nfor(var i = 0; i < 31; i++){\n    /* US-ASCII Control Characters */ controlChars.push(String.fromCharCode(i));\n}\nvar cookieNameValidateRegEx = /([\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2f\\x3a-\\x3f\\x40\\x5b-\\x5e\\x7b\\x7d\\x7f])/;\nvar cookieValueValidateRegEx = /[^\\x21\\x23-\\x2b\\x2d-\\x3a\\x3c-\\x5b\\x5d-\\x7e]/;\nvar cookieValueDQuoteValidateRegEx = /^\"[^\"]*\"$/;\nvar controlCharsAndSemicolonRegEx = /[\\x00-\\x20\\x3b]/g;\nvar cookieSeparatorRegEx = /[;,] */;\nvar httpStatusDescriptions = {\n    100: \"Continue\",\n    101: \"Switching Protocols\",\n    200: \"OK\",\n    201: \"Created\",\n    203: \"Non-Authoritative Information\",\n    204: \"No Content\",\n    205: \"Reset Content\",\n    206: \"Partial Content\",\n    300: \"Multiple Choices\",\n    301: \"Moved Permanently\",\n    302: \"Found\",\n    303: \"See Other\",\n    304: \"Not Modified\",\n    305: \"Use Proxy\",\n    307: \"Temporary Redirect\",\n    400: \"Bad Request\",\n    401: \"Unauthorized\",\n    402: \"Payment Required\",\n    403: \"Forbidden\",\n    404: \"Not Found\",\n    406: \"Not Acceptable\",\n    407: \"Proxy Authorization Required\",\n    408: \"Request Timeout\",\n    409: \"Conflict\",\n    410: \"Gone\",\n    411: \"Length Required\",\n    412: \"Precondition Failed\",\n    413: \"Request Entity Too Long\",\n    414: \"Request-URI Too Long\",\n    415: \"Unsupported Media Type\",\n    416: \"Requested Range Not Satisfiable\",\n    417: \"Expectation Failed\",\n    426: \"Upgrade Required\",\n    500: \"Internal Server Error\",\n    501: \"Not Implemented\",\n    502: \"Bad Gateway\",\n    503: \"Service Unavailable\",\n    504: \"Gateway Timeout\",\n    505: \"HTTP Version Not Supported\"\n};\nfunction WebSocketRequest(socket, httpRequest, serverConfig) {\n    // Superclass Constructor\n    EventEmitter.call(this);\n    this.socket = socket;\n    this.httpRequest = httpRequest;\n    this.resource = httpRequest.url;\n    this.remoteAddress = socket.remoteAddress;\n    this.remoteAddresses = [\n        this.remoteAddress\n    ];\n    this.serverConfig = serverConfig;\n    // Watch for the underlying TCP socket closing before we call accept\n    this._socketIsClosing = false;\n    this._socketCloseHandler = this._handleSocketCloseBeforeAccept.bind(this);\n    this.socket.on(\"end\", this._socketCloseHandler);\n    this.socket.on(\"close\", this._socketCloseHandler);\n    this._resolved = false;\n}\nutil.inherits(WebSocketRequest, EventEmitter);\nWebSocketRequest.prototype.readHandshake = function() {\n    var self = this;\n    var request = this.httpRequest;\n    // Decode URL\n    this.resourceURL = url.parse(this.resource, true);\n    this.host = request.headers[\"host\"];\n    if (!this.host) {\n        throw new Error(\"Client must provide a Host header.\");\n    }\n    this.key = request.headers[\"sec-websocket-key\"];\n    if (!this.key) {\n        throw new Error(\"Client must provide a value for Sec-WebSocket-Key.\");\n    }\n    this.webSocketVersion = parseInt(request.headers[\"sec-websocket-version\"], 10);\n    if (!this.webSocketVersion || isNaN(this.webSocketVersion)) {\n        throw new Error(\"Client must provide a value for Sec-WebSocket-Version.\");\n    }\n    switch(this.webSocketVersion){\n        case 8:\n        case 13:\n            break;\n        default:\n            var e = new Error(\"Unsupported websocket client version: \" + this.webSocketVersion + \"Only versions 8 and 13 are supported.\");\n            e.httpCode = 426;\n            e.headers = {\n                \"Sec-WebSocket-Version\": \"13\"\n            };\n            throw e;\n    }\n    if (this.webSocketVersion === 13) {\n        this.origin = request.headers[\"origin\"];\n    } else if (this.webSocketVersion === 8) {\n        this.origin = request.headers[\"sec-websocket-origin\"];\n    }\n    // Protocol is optional.\n    var protocolString = request.headers[\"sec-websocket-protocol\"];\n    this.protocolFullCaseMap = {};\n    this.requestedProtocols = [];\n    if (protocolString) {\n        var requestedProtocolsFullCase = protocolString.split(headerValueSplitRegExp);\n        requestedProtocolsFullCase.forEach(function(protocol) {\n            var lcProtocol = protocol.toLocaleLowerCase();\n            self.requestedProtocols.push(lcProtocol);\n            self.protocolFullCaseMap[lcProtocol] = protocol;\n        });\n    }\n    if (!this.serverConfig.ignoreXForwardedFor && request.headers[\"x-forwarded-for\"]) {\n        var immediatePeerIP = this.remoteAddress;\n        this.remoteAddresses = request.headers[\"x-forwarded-for\"].split(xForwardedForSeparatorRegExp);\n        this.remoteAddresses.push(immediatePeerIP);\n        this.remoteAddress = this.remoteAddresses[0];\n    }\n    // Extensions are optional.\n    if (this.serverConfig.parseExtensions) {\n        var extensionsString = request.headers[\"sec-websocket-extensions\"];\n        this.requestedExtensions = this.parseExtensions(extensionsString);\n    } else {\n        this.requestedExtensions = [];\n    }\n    // Cookies are optional\n    if (this.serverConfig.parseCookies) {\n        var cookieString = request.headers[\"cookie\"];\n        this.cookies = this.parseCookies(cookieString);\n    } else {\n        this.cookies = [];\n    }\n};\nWebSocketRequest.prototype.parseExtensions = function(extensionsString) {\n    if (!extensionsString || extensionsString.length === 0) {\n        return [];\n    }\n    var extensions = extensionsString.toLocaleLowerCase().split(headerValueSplitRegExp);\n    extensions.forEach(function(extension, index, array) {\n        var params = extension.split(headerParamSplitRegExp);\n        var extensionName = params[0];\n        var extensionParams = params.slice(1);\n        extensionParams.forEach(function(rawParam, index, array) {\n            var arr = rawParam.split(\"=\");\n            var obj = {\n                name: arr[0],\n                value: arr[1]\n            };\n            array.splice(index, 1, obj);\n        });\n        var obj = {\n            name: extensionName,\n            params: extensionParams\n        };\n        array.splice(index, 1, obj);\n    });\n    return extensions;\n};\n// This function adapted from node-cookie\n// https://github.com/shtylman/node-cookie\nWebSocketRequest.prototype.parseCookies = function(str) {\n    // Sanity Check\n    if (!str || typeof str !== \"string\") {\n        return [];\n    }\n    var cookies = [];\n    var pairs = str.split(cookieSeparatorRegEx);\n    pairs.forEach(function(pair) {\n        var eq_idx = pair.indexOf(\"=\");\n        if (eq_idx === -1) {\n            cookies.push({\n                name: pair,\n                value: null\n            });\n            return;\n        }\n        var key = pair.substr(0, eq_idx).trim();\n        var val = pair.substr(++eq_idx, pair.length).trim();\n        // quoted values\n        if ('\"' === val[0]) {\n            val = val.slice(1, -1);\n        }\n        cookies.push({\n            name: key,\n            value: decodeURIComponent(val)\n        });\n    });\n    return cookies;\n};\nWebSocketRequest.prototype.accept = function(acceptedProtocol, allowedOrigin, cookies) {\n    this._verifyResolution();\n    // TODO: Handle extensions\n    var protocolFullCase;\n    if (acceptedProtocol) {\n        protocolFullCase = this.protocolFullCaseMap[acceptedProtocol.toLocaleLowerCase()];\n        if (typeof protocolFullCase === \"undefined\") {\n            protocolFullCase = acceptedProtocol;\n        }\n    } else {\n        protocolFullCase = acceptedProtocol;\n    }\n    this.protocolFullCaseMap = null;\n    // Create key validation hash\n    var sha1 = crypto.createHash(\"sha1\");\n    sha1.update(this.key + \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\");\n    var acceptKey = sha1.digest(\"base64\");\n    var response = \"HTTP/1.1 101 Switching Protocols\\r\\n\" + \"Upgrade: websocket\\r\\n\" + \"Connection: Upgrade\\r\\n\" + \"Sec-WebSocket-Accept: \" + acceptKey + \"\\r\\n\";\n    if (protocolFullCase) {\n        // validate protocol\n        for(var i = 0; i < protocolFullCase.length; i++){\n            var charCode = protocolFullCase.charCodeAt(i);\n            var character = protocolFullCase.charAt(i);\n            if (charCode < 0x21 || charCode > 0x7E || separators.indexOf(character) !== -1) {\n                this.reject(500);\n                throw new Error('Illegal character \"' + String.fromCharCode(character) + '\" in subprotocol.');\n            }\n        }\n        if (this.requestedProtocols.indexOf(acceptedProtocol) === -1) {\n            this.reject(500);\n            throw new Error(\"Specified protocol was not requested by the client.\");\n        }\n        protocolFullCase = protocolFullCase.replace(headerSanitizeRegExp, \"\");\n        response += \"Sec-WebSocket-Protocol: \" + protocolFullCase + \"\\r\\n\";\n    }\n    this.requestedProtocols = null;\n    if (allowedOrigin) {\n        allowedOrigin = allowedOrigin.replace(headerSanitizeRegExp, \"\");\n        if (this.webSocketVersion === 13) {\n            response += \"Origin: \" + allowedOrigin + \"\\r\\n\";\n        } else if (this.webSocketVersion === 8) {\n            response += \"Sec-WebSocket-Origin: \" + allowedOrigin + \"\\r\\n\";\n        }\n    }\n    if (cookies) {\n        if (!Array.isArray(cookies)) {\n            this.reject(500);\n            throw new Error('Value supplied for \"cookies\" argument must be an array.');\n        }\n        var seenCookies = {};\n        cookies.forEach((function(cookie) {\n            if (!cookie.name || !cookie.value) {\n                this.reject(500);\n                throw new Error('Each cookie to set must at least provide a \"name\" and \"value\"');\n            }\n            // Make sure there are no \\r\\n sequences inserted\n            cookie.name = cookie.name.replace(controlCharsAndSemicolonRegEx, \"\");\n            cookie.value = cookie.value.replace(controlCharsAndSemicolonRegEx, \"\");\n            if (seenCookies[cookie.name]) {\n                this.reject(500);\n                throw new Error(\"You may not specify the same cookie name twice.\");\n            }\n            seenCookies[cookie.name] = true;\n            // token (RFC 2616, Section 2.2)\n            var invalidChar = cookie.name.match(cookieNameValidateRegEx);\n            if (invalidChar) {\n                this.reject(500);\n                throw new Error(\"Illegal character \" + invalidChar[0] + \" in cookie name\");\n            }\n            // RFC 6265, Section 4.1.1\n            // *cookie-octet / ( DQUOTE *cookie-octet DQUOTE ) | %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E\n            if (cookie.value.match(cookieValueDQuoteValidateRegEx)) {\n                invalidChar = cookie.value.slice(1, -1).match(cookieValueValidateRegEx);\n            } else {\n                invalidChar = cookie.value.match(cookieValueValidateRegEx);\n            }\n            if (invalidChar) {\n                this.reject(500);\n                throw new Error(\"Illegal character \" + invalidChar[0] + \" in cookie value\");\n            }\n            var cookieParts = [\n                cookie.name + \"=\" + cookie.value\n            ];\n            // RFC 6265, Section 4.1.1\n            // 'Path=' path-value | <any CHAR except CTLs or ';'>\n            if (cookie.path) {\n                invalidChar = cookie.path.match(controlCharsAndSemicolonRegEx);\n                if (invalidChar) {\n                    this.reject(500);\n                    throw new Error(\"Illegal character \" + invalidChar[0] + \" in cookie path\");\n                }\n                cookieParts.push(\"Path=\" + cookie.path);\n            }\n            // RFC 6265, Section 4.1.2.3\n            // 'Domain=' subdomain\n            if (cookie.domain) {\n                if (typeof cookie.domain !== \"string\") {\n                    this.reject(500);\n                    throw new Error(\"Domain must be specified and must be a string.\");\n                }\n                invalidChar = cookie.domain.match(controlCharsAndSemicolonRegEx);\n                if (invalidChar) {\n                    this.reject(500);\n                    throw new Error(\"Illegal character \" + invalidChar[0] + \" in cookie domain\");\n                }\n                cookieParts.push(\"Domain=\" + cookie.domain.toLowerCase());\n            }\n            // RFC 6265, Section 4.1.1\n            //'Expires=' sane-cookie-date | Force Date object requirement by using only epoch\n            if (cookie.expires) {\n                if (!(cookie.expires instanceof Date)) {\n                    this.reject(500);\n                    throw new Error('Value supplied for cookie \"expires\" must be a vaild date object');\n                }\n                cookieParts.push(\"Expires=\" + cookie.expires.toGMTString());\n            }\n            // RFC 6265, Section 4.1.1\n            //'Max-Age=' non-zero-digit *DIGIT\n            if (cookie.maxage) {\n                var maxage = cookie.maxage;\n                if (typeof maxage === \"string\") {\n                    maxage = parseInt(maxage, 10);\n                }\n                if (isNaN(maxage) || maxage <= 0) {\n                    this.reject(500);\n                    throw new Error('Value supplied for cookie \"maxage\" must be a non-zero number');\n                }\n                maxage = Math.round(maxage);\n                cookieParts.push(\"Max-Age=\" + maxage.toString(10));\n            }\n            // RFC 6265, Section 4.1.1\n            //'Secure;'\n            if (cookie.secure) {\n                if (typeof cookie.secure !== \"boolean\") {\n                    this.reject(500);\n                    throw new Error('Value supplied for cookie \"secure\" must be of type boolean');\n                }\n                cookieParts.push(\"Secure\");\n            }\n            // RFC 6265, Section 4.1.1\n            //'HttpOnly;'\n            if (cookie.httponly) {\n                if (typeof cookie.httponly !== \"boolean\") {\n                    this.reject(500);\n                    throw new Error('Value supplied for cookie \"httponly\" must be of type boolean');\n                }\n                cookieParts.push(\"HttpOnly\");\n            }\n            response += \"Set-Cookie: \" + cookieParts.join(\";\") + \"\\r\\n\";\n        }).bind(this));\n    }\n    // TODO: handle negotiated extensions\n    // if (negotiatedExtensions) {\n    //     response += 'Sec-WebSocket-Extensions: ' + negotiatedExtensions.join(', ') + '\\r\\n';\n    // }\n    // Mark the request resolved now so that the user can't call accept or\n    // reject a second time.\n    this._resolved = true;\n    this.emit(\"requestResolved\", this);\n    response += \"\\r\\n\";\n    var connection = new WebSocketConnection(this.socket, [], acceptedProtocol, false, this.serverConfig);\n    connection.webSocketVersion = this.webSocketVersion;\n    connection.remoteAddress = this.remoteAddress;\n    connection.remoteAddresses = this.remoteAddresses;\n    var self = this;\n    if (this._socketIsClosing) {\n        // Handle case when the client hangs up before we get a chance to\n        // accept the connection and send our side of the opening handshake.\n        cleanupFailedConnection(connection);\n    } else {\n        this.socket.write(response, \"ascii\", function(error) {\n            if (error) {\n                cleanupFailedConnection(connection);\n                return;\n            }\n            self._removeSocketCloseListeners();\n            connection._addSocketEventListeners();\n        });\n    }\n    this.emit(\"requestAccepted\", connection);\n    return connection;\n};\nWebSocketRequest.prototype.reject = function(status, reason, extraHeaders) {\n    this._verifyResolution();\n    // Mark the request resolved now so that the user can't call accept or\n    // reject a second time.\n    this._resolved = true;\n    this.emit(\"requestResolved\", this);\n    if (typeof status !== \"number\") {\n        status = 403;\n    }\n    var response = \"HTTP/1.1 \" + status + \" \" + httpStatusDescriptions[status] + \"\\r\\n\" + \"Connection: close\\r\\n\";\n    if (reason) {\n        reason = reason.replace(headerSanitizeRegExp, \"\");\n        response += \"X-WebSocket-Reject-Reason: \" + reason + \"\\r\\n\";\n    }\n    if (extraHeaders) {\n        for(var key in extraHeaders){\n            var sanitizedValue = extraHeaders[key].toString().replace(headerSanitizeRegExp, \"\");\n            var sanitizedKey = key.replace(headerSanitizeRegExp, \"\");\n            response += sanitizedKey + \": \" + sanitizedValue + \"\\r\\n\";\n        }\n    }\n    response += \"\\r\\n\";\n    this.socket.end(response, \"ascii\");\n    this.emit(\"requestRejected\", this);\n};\nWebSocketRequest.prototype._handleSocketCloseBeforeAccept = function() {\n    this._socketIsClosing = true;\n    this._removeSocketCloseListeners();\n};\nWebSocketRequest.prototype._removeSocketCloseListeners = function() {\n    this.socket.removeListener(\"end\", this._socketCloseHandler);\n    this.socket.removeListener(\"close\", this._socketCloseHandler);\n};\nWebSocketRequest.prototype._verifyResolution = function() {\n    if (this._resolved) {\n        throw new Error(\"WebSocketRequest may only be accepted or rejected one time.\");\n    }\n};\nfunction cleanupFailedConnection(connection) {\n    // Since we have to return a connection object even if the socket is\n    // already dead in order not to break the API, we schedule a 'close'\n    // event on the connection object to occur immediately.\n    process.nextTick(function() {\n        // WebSocketConnection.CLOSE_REASON_ABNORMAL = 1006\n        // Third param: Skip sending the close frame to a dead socket\n        connection.drop(1006, \"TCP connection lost before handshake completed.\", true);\n    });\n}\nmodule.exports = WebSocketRequest;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/websocket/lib/WebSocketRequest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/websocket/lib/WebSocketRouter.js":
/*!*******************************************************!*\
  !*** ./node_modules/websocket/lib/WebSocketRouter.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/ \nvar extend = (__webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/websocket/lib/utils.js\").extend);\nvar util = __webpack_require__(/*! util */ \"util\");\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nvar WebSocketRouterRequest = __webpack_require__(/*! ./WebSocketRouterRequest */ \"(rsc)/./node_modules/websocket/lib/WebSocketRouterRequest.js\");\nfunction WebSocketRouter(config) {\n    // Superclass Constructor\n    EventEmitter.call(this);\n    this.config = {\n        // The WebSocketServer instance to attach to.\n        server: null\n    };\n    if (config) {\n        extend(this.config, config);\n    }\n    this.handlers = [];\n    this._requestHandler = this.handleRequest.bind(this);\n    if (this.config.server) {\n        this.attachServer(this.config.server);\n    }\n}\nutil.inherits(WebSocketRouter, EventEmitter);\nWebSocketRouter.prototype.attachServer = function(server) {\n    if (server) {\n        this.server = server;\n        this.server.on(\"request\", this._requestHandler);\n    } else {\n        throw new Error(\"You must specify a WebSocketServer instance to attach to.\");\n    }\n};\nWebSocketRouter.prototype.detachServer = function() {\n    if (this.server) {\n        this.server.removeListener(\"request\", this._requestHandler);\n        this.server = null;\n    } else {\n        throw new Error(\"Cannot detach from server: not attached.\");\n    }\n};\nWebSocketRouter.prototype.mount = function(path, protocol, callback) {\n    if (!path) {\n        throw new Error(\"You must specify a path for this handler.\");\n    }\n    if (!protocol) {\n        protocol = \"____no_protocol____\";\n    }\n    if (!callback) {\n        throw new Error(\"You must specify a callback for this handler.\");\n    }\n    path = this.pathToRegExp(path);\n    if (!(path instanceof RegExp)) {\n        throw new Error(\"Path must be specified as either a string or a RegExp.\");\n    }\n    var pathString = path.toString();\n    // normalize protocol to lower-case\n    protocol = protocol.toLocaleLowerCase();\n    if (this.findHandlerIndex(pathString, protocol) !== -1) {\n        throw new Error(\"You may only mount one handler per path/protocol combination.\");\n    }\n    this.handlers.push({\n        \"path\": path,\n        \"pathString\": pathString,\n        \"protocol\": protocol,\n        \"callback\": callback\n    });\n};\nWebSocketRouter.prototype.unmount = function(path, protocol) {\n    var index = this.findHandlerIndex(this.pathToRegExp(path).toString(), protocol);\n    if (index !== -1) {\n        this.handlers.splice(index, 1);\n    } else {\n        throw new Error(\"Unable to find a route matching the specified path and protocol.\");\n    }\n};\nWebSocketRouter.prototype.findHandlerIndex = function(pathString, protocol) {\n    protocol = protocol.toLocaleLowerCase();\n    for(var i = 0, len = this.handlers.length; i < len; i++){\n        var handler = this.handlers[i];\n        if (handler.pathString === pathString && handler.protocol === protocol) {\n            return i;\n        }\n    }\n    return -1;\n};\nWebSocketRouter.prototype.pathToRegExp = function(path) {\n    if (typeof path === \"string\") {\n        if (path === \"*\") {\n            path = /^.*$/;\n        } else {\n            path = path.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n            path = new RegExp(\"^\" + path + \"$\");\n        }\n    }\n    return path;\n};\nWebSocketRouter.prototype.handleRequest = function(request) {\n    var requestedProtocols = request.requestedProtocols;\n    if (requestedProtocols.length === 0) {\n        requestedProtocols = [\n            \"____no_protocol____\"\n        ];\n    }\n    // Find a handler with the first requested protocol first\n    for(var i = 0; i < requestedProtocols.length; i++){\n        var requestedProtocol = requestedProtocols[i].toLocaleLowerCase();\n        // find the first handler that can process this request\n        for(var j = 0, len = this.handlers.length; j < len; j++){\n            var handler = this.handlers[j];\n            if (handler.path.test(request.resourceURL.pathname)) {\n                if (requestedProtocol === handler.protocol || handler.protocol === \"*\") {\n                    var routerRequest = new WebSocketRouterRequest(request, requestedProtocol);\n                    handler.callback(routerRequest);\n                    return;\n                }\n            }\n        }\n    }\n    // If we get here we were unable to find a suitable handler.\n    request.reject(404, \"No handler is available for the given request.\");\n};\nmodule.exports = WebSocketRouter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/websocket/lib/WebSocketRouter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/websocket/lib/WebSocketRouterRequest.js":
/*!**************************************************************!*\
  !*** ./node_modules/websocket/lib/WebSocketRouterRequest.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/ \nvar util = __webpack_require__(/*! util */ \"util\");\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nfunction WebSocketRouterRequest(webSocketRequest, resolvedProtocol) {\n    // Superclass Constructor\n    EventEmitter.call(this);\n    this.webSocketRequest = webSocketRequest;\n    if (resolvedProtocol === \"____no_protocol____\") {\n        this.protocol = null;\n    } else {\n        this.protocol = resolvedProtocol;\n    }\n    this.origin = webSocketRequest.origin;\n    this.resource = webSocketRequest.resource;\n    this.resourceURL = webSocketRequest.resourceURL;\n    this.httpRequest = webSocketRequest.httpRequest;\n    this.remoteAddress = webSocketRequest.remoteAddress;\n    this.webSocketVersion = webSocketRequest.webSocketVersion;\n    this.requestedExtensions = webSocketRequest.requestedExtensions;\n    this.cookies = webSocketRequest.cookies;\n}\nutil.inherits(WebSocketRouterRequest, EventEmitter);\nWebSocketRouterRequest.prototype.accept = function(origin, cookies) {\n    var connection = this.webSocketRequest.accept(this.protocol, origin, cookies);\n    this.emit(\"requestAccepted\", connection);\n    return connection;\n};\nWebSocketRouterRequest.prototype.reject = function(status, reason, extraHeaders) {\n    this.webSocketRequest.reject(status, reason, extraHeaders);\n    this.emit(\"requestRejected\", this);\n};\nmodule.exports = WebSocketRouterRequest;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2Vic29ja2V0L2xpYi9XZWJTb2NrZXRSb3V0ZXJSZXF1ZXN0LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozt1RUFjdUU7QUFFdkUsSUFBSUEsT0FBT0MsbUJBQU9BLENBQUM7QUFDbkIsSUFBSUMsZUFBZUQsMERBQThCO0FBRWpELFNBQVNFLHVCQUF1QkMsZ0JBQWdCLEVBQUVDLGdCQUFnQjtJQUM5RCx5QkFBeUI7SUFDekJILGFBQWFJLElBQUksQ0FBQyxJQUFJO0lBRXRCLElBQUksQ0FBQ0YsZ0JBQWdCLEdBQUdBO0lBQ3hCLElBQUlDLHFCQUFxQix1QkFBdUI7UUFDNUMsSUFBSSxDQUFDRSxRQUFRLEdBQUc7SUFDcEIsT0FDSztRQUNELElBQUksQ0FBQ0EsUUFBUSxHQUFHRjtJQUNwQjtJQUNBLElBQUksQ0FBQ0csTUFBTSxHQUFHSixpQkFBaUJJLE1BQU07SUFDckMsSUFBSSxDQUFDQyxRQUFRLEdBQUdMLGlCQUFpQkssUUFBUTtJQUN6QyxJQUFJLENBQUNDLFdBQVcsR0FBR04saUJBQWlCTSxXQUFXO0lBQy9DLElBQUksQ0FBQ0MsV0FBVyxHQUFHUCxpQkFBaUJPLFdBQVc7SUFDL0MsSUFBSSxDQUFDQyxhQUFhLEdBQUdSLGlCQUFpQlEsYUFBYTtJQUNuRCxJQUFJLENBQUNDLGdCQUFnQixHQUFHVCxpQkFBaUJTLGdCQUFnQjtJQUN6RCxJQUFJLENBQUNDLG1CQUFtQixHQUFHVixpQkFBaUJVLG1CQUFtQjtJQUMvRCxJQUFJLENBQUNDLE9BQU8sR0FBR1gsaUJBQWlCVyxPQUFPO0FBQzNDO0FBRUFmLEtBQUtnQixRQUFRLENBQUNiLHdCQUF3QkQ7QUFFdENDLHVCQUF1QmMsU0FBUyxDQUFDQyxNQUFNLEdBQUcsU0FBU1YsTUFBTSxFQUFFTyxPQUFPO0lBQzlELElBQUlJLGFBQWEsSUFBSSxDQUFDZixnQkFBZ0IsQ0FBQ2MsTUFBTSxDQUFDLElBQUksQ0FBQ1gsUUFBUSxFQUFFQyxRQUFRTztJQUNyRSxJQUFJLENBQUNLLElBQUksQ0FBQyxtQkFBbUJEO0lBQzdCLE9BQU9BO0FBQ1g7QUFFQWhCLHVCQUF1QmMsU0FBUyxDQUFDSSxNQUFNLEdBQUcsU0FBU0MsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLFlBQVk7SUFDM0UsSUFBSSxDQUFDcEIsZ0JBQWdCLENBQUNpQixNQUFNLENBQUNDLFFBQVFDLFFBQVFDO0lBQzdDLElBQUksQ0FBQ0osSUFBSSxDQUFDLG1CQUFtQixJQUFJO0FBQ3JDO0FBRUFLLE9BQU9DLE9BQU8sR0FBR3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dlYnNvY2tldC9saWIvV2ViU29ja2V0Um91dGVyUmVxdWVzdC5qcz8zYjk5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICBDb3B5cmlnaHQgMjAxMC0yMDE1IEJyaWFuIE1jS2VsdmV5LlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuXG5mdW5jdGlvbiBXZWJTb2NrZXRSb3V0ZXJSZXF1ZXN0KHdlYlNvY2tldFJlcXVlc3QsIHJlc29sdmVkUHJvdG9jb2wpIHtcbiAgICAvLyBTdXBlcmNsYXNzIENvbnN0cnVjdG9yXG4gICAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLndlYlNvY2tldFJlcXVlc3QgPSB3ZWJTb2NrZXRSZXF1ZXN0O1xuICAgIGlmIChyZXNvbHZlZFByb3RvY29sID09PSAnX19fX25vX3Byb3RvY29sX19fXycpIHtcbiAgICAgICAgdGhpcy5wcm90b2NvbCA9IG51bGw7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aGlzLnByb3RvY29sID0gcmVzb2x2ZWRQcm90b2NvbDtcbiAgICB9XG4gICAgdGhpcy5vcmlnaW4gPSB3ZWJTb2NrZXRSZXF1ZXN0Lm9yaWdpbjtcbiAgICB0aGlzLnJlc291cmNlID0gd2ViU29ja2V0UmVxdWVzdC5yZXNvdXJjZTtcbiAgICB0aGlzLnJlc291cmNlVVJMID0gd2ViU29ja2V0UmVxdWVzdC5yZXNvdXJjZVVSTDtcbiAgICB0aGlzLmh0dHBSZXF1ZXN0ID0gd2ViU29ja2V0UmVxdWVzdC5odHRwUmVxdWVzdDtcbiAgICB0aGlzLnJlbW90ZUFkZHJlc3MgPSB3ZWJTb2NrZXRSZXF1ZXN0LnJlbW90ZUFkZHJlc3M7XG4gICAgdGhpcy53ZWJTb2NrZXRWZXJzaW9uID0gd2ViU29ja2V0UmVxdWVzdC53ZWJTb2NrZXRWZXJzaW9uO1xuICAgIHRoaXMucmVxdWVzdGVkRXh0ZW5zaW9ucyA9IHdlYlNvY2tldFJlcXVlc3QucmVxdWVzdGVkRXh0ZW5zaW9ucztcbiAgICB0aGlzLmNvb2tpZXMgPSB3ZWJTb2NrZXRSZXF1ZXN0LmNvb2tpZXM7XG59XG5cbnV0aWwuaW5oZXJpdHMoV2ViU29ja2V0Um91dGVyUmVxdWVzdCwgRXZlbnRFbWl0dGVyKTtcblxuV2ViU29ja2V0Um91dGVyUmVxdWVzdC5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24ob3JpZ2luLCBjb29raWVzKSB7XG4gICAgdmFyIGNvbm5lY3Rpb24gPSB0aGlzLndlYlNvY2tldFJlcXVlc3QuYWNjZXB0KHRoaXMucHJvdG9jb2wsIG9yaWdpbiwgY29va2llcyk7XG4gICAgdGhpcy5lbWl0KCdyZXF1ZXN0QWNjZXB0ZWQnLCBjb25uZWN0aW9uKTtcbiAgICByZXR1cm4gY29ubmVjdGlvbjtcbn07XG5cbldlYlNvY2tldFJvdXRlclJlcXVlc3QucHJvdG90eXBlLnJlamVjdCA9IGZ1bmN0aW9uKHN0YXR1cywgcmVhc29uLCBleHRyYUhlYWRlcnMpIHtcbiAgICB0aGlzLndlYlNvY2tldFJlcXVlc3QucmVqZWN0KHN0YXR1cywgcmVhc29uLCBleHRyYUhlYWRlcnMpO1xuICAgIHRoaXMuZW1pdCgncmVxdWVzdFJlamVjdGVkJywgdGhpcyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYlNvY2tldFJvdXRlclJlcXVlc3Q7XG4iXSwibmFtZXMiOlsidXRpbCIsInJlcXVpcmUiLCJFdmVudEVtaXR0ZXIiLCJXZWJTb2NrZXRSb3V0ZXJSZXF1ZXN0Iiwid2ViU29ja2V0UmVxdWVzdCIsInJlc29sdmVkUHJvdG9jb2wiLCJjYWxsIiwicHJvdG9jb2wiLCJvcmlnaW4iLCJyZXNvdXJjZSIsInJlc291cmNlVVJMIiwiaHR0cFJlcXVlc3QiLCJyZW1vdGVBZGRyZXNzIiwid2ViU29ja2V0VmVyc2lvbiIsInJlcXVlc3RlZEV4dGVuc2lvbnMiLCJjb29raWVzIiwiaW5oZXJpdHMiLCJwcm90b3R5cGUiLCJhY2NlcHQiLCJjb25uZWN0aW9uIiwiZW1pdCIsInJlamVjdCIsInN0YXR1cyIsInJlYXNvbiIsImV4dHJhSGVhZGVycyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/websocket/lib/WebSocketRouterRequest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/websocket/lib/WebSocketServer.js":
/*!*******************************************************!*\
  !*** ./node_modules/websocket/lib/WebSocketServer.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/ \nvar extend = (__webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/websocket/lib/utils.js\").extend);\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/websocket/lib/utils.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\")(\"websocket:server\");\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nvar WebSocketRequest = __webpack_require__(/*! ./WebSocketRequest */ \"(rsc)/./node_modules/websocket/lib/WebSocketRequest.js\");\nvar WebSocketServer = function WebSocketServer(config) {\n    // Superclass Constructor\n    EventEmitter.call(this);\n    this._handlers = {\n        upgrade: this.handleUpgrade.bind(this),\n        requestAccepted: this.handleRequestAccepted.bind(this),\n        requestResolved: this.handleRequestResolved.bind(this)\n    };\n    this.connections = [];\n    this.pendingRequests = [];\n    if (config) {\n        this.mount(config);\n    }\n};\nutil.inherits(WebSocketServer, EventEmitter);\nWebSocketServer.prototype.mount = function(config) {\n    this.config = {\n        // The http server instance to attach to.  Required.\n        httpServer: null,\n        // 64KiB max frame size.\n        maxReceivedFrameSize: 0x10000,\n        // 1MiB max message size, only applicable if\n        // assembleFragments is true\n        maxReceivedMessageSize: 0x100000,\n        // Outgoing messages larger than fragmentationThreshold will be\n        // split into multiple fragments.\n        fragmentOutgoingMessages: true,\n        // Outgoing frames are fragmented if they exceed this threshold.\n        // Default is 16KiB\n        fragmentationThreshold: 0x4000,\n        // If true, the server will automatically send a ping to all\n        // clients every 'keepaliveInterval' milliseconds.  The timer is\n        // reset on any received data from the client.\n        keepalive: true,\n        // The interval to send keepalive pings to connected clients if the\n        // connection is idle.  Any received data will reset the counter.\n        keepaliveInterval: 20000,\n        // If true, the server will consider any connection that has not\n        // received any data within the amount of time specified by\n        // 'keepaliveGracePeriod' after a keepalive ping has been sent to\n        // be dead, and will drop the connection.\n        // Ignored if keepalive is false.\n        dropConnectionOnKeepaliveTimeout: true,\n        // The amount of time to wait after sending a keepalive ping before\n        // closing the connection if the connected peer does not respond.\n        // Ignored if keepalive is false.\n        keepaliveGracePeriod: 10000,\n        // Whether to use native TCP keep-alive instead of WebSockets ping\n        // and pong packets.  Native TCP keep-alive sends smaller packets\n        // on the wire and so uses bandwidth more efficiently.  This may\n        // be more important when talking to mobile devices.\n        // If this value is set to true, then these values will be ignored:\n        //   keepaliveGracePeriod\n        //   dropConnectionOnKeepaliveTimeout\n        useNativeKeepalive: false,\n        // If true, fragmented messages will be automatically assembled\n        // and the full message will be emitted via a 'message' event.\n        // If false, each frame will be emitted via a 'frame' event and\n        // the application will be responsible for aggregating multiple\n        // fragmented frames.  Single-frame messages will emit a 'message'\n        // event in addition to the 'frame' event.\n        // Most users will want to leave this set to 'true'\n        assembleFragments: true,\n        // If this is true, websocket connections will be accepted\n        // regardless of the path and protocol specified by the client.\n        // The protocol accepted will be the first that was requested\n        // by the client.  Clients from any origin will be accepted.\n        // This should only be used in the simplest of cases.  You should\n        // probably leave this set to 'false' and inspect the request\n        // object to make sure it's acceptable before accepting it.\n        autoAcceptConnections: false,\n        // Whether or not the X-Forwarded-For header should be respected.\n        // It's important to set this to 'true' when accepting connections\n        // from untrusted clients, as a malicious client could spoof its\n        // IP address by simply setting this header.  It's meant to be added\n        // by a trusted proxy or other intermediary within your own\n        // infrastructure.\n        // See:  http://en.wikipedia.org/wiki/X-Forwarded-For\n        ignoreXForwardedFor: false,\n        // If this is true, 'cookie' headers are parsed and exposed as WebSocketRequest.cookies\n        parseCookies: true,\n        // If this is true, 'sec-websocket-extensions' headers are parsed and exposed as WebSocketRequest.requestedExtensions\n        parseExtensions: true,\n        // The Nagle Algorithm makes more efficient use of network resources\n        // by introducing a small delay before sending small packets so that\n        // multiple messages can be batched together before going onto the\n        // wire.  This however comes at the cost of latency, so the default\n        // is to disable it.  If you don't need low latency and are streaming\n        // lots of small messages, you can change this to 'false'\n        disableNagleAlgorithm: true,\n        // The number of milliseconds to wait after sending a close frame\n        // for an acknowledgement to come back before giving up and just\n        // closing the socket.\n        closeTimeout: 5000\n    };\n    extend(this.config, config);\n    if (this.config.httpServer) {\n        if (!Array.isArray(this.config.httpServer)) {\n            this.config.httpServer = [\n                this.config.httpServer\n            ];\n        }\n        var upgradeHandler = this._handlers.upgrade;\n        this.config.httpServer.forEach(function(httpServer) {\n            httpServer.on(\"upgrade\", upgradeHandler);\n        });\n    } else {\n        throw new Error(\"You must specify an httpServer on which to mount the WebSocket server.\");\n    }\n};\nWebSocketServer.prototype.unmount = function() {\n    var upgradeHandler = this._handlers.upgrade;\n    this.config.httpServer.forEach(function(httpServer) {\n        httpServer.removeListener(\"upgrade\", upgradeHandler);\n    });\n};\nWebSocketServer.prototype.closeAllConnections = function() {\n    this.connections.forEach(function(connection) {\n        connection.close();\n    });\n    this.pendingRequests.forEach(function(request) {\n        process.nextTick(function() {\n            request.reject(503); // HTTP 503 Service Unavailable\n        });\n    });\n};\nWebSocketServer.prototype.broadcast = function(data) {\n    if (Buffer.isBuffer(data)) {\n        this.broadcastBytes(data);\n    } else if (typeof data.toString === \"function\") {\n        this.broadcastUTF(data);\n    }\n};\nWebSocketServer.prototype.broadcastUTF = function(utfData) {\n    this.connections.forEach(function(connection) {\n        connection.sendUTF(utfData);\n    });\n};\nWebSocketServer.prototype.broadcastBytes = function(binaryData) {\n    this.connections.forEach(function(connection) {\n        connection.sendBytes(binaryData);\n    });\n};\nWebSocketServer.prototype.shutDown = function() {\n    this.unmount();\n    this.closeAllConnections();\n};\nWebSocketServer.prototype.handleUpgrade = function(request, socket) {\n    var self = this;\n    var wsRequest = new WebSocketRequest(socket, request, this.config);\n    try {\n        wsRequest.readHandshake();\n    } catch (e) {\n        wsRequest.reject(e.httpCode ? e.httpCode : 400, e.message, e.headers);\n        debug(\"Invalid handshake: %s\", e.message);\n        this.emit(\"upgradeError\", e);\n        return;\n    }\n    this.pendingRequests.push(wsRequest);\n    wsRequest.once(\"requestAccepted\", this._handlers.requestAccepted);\n    wsRequest.once(\"requestResolved\", this._handlers.requestResolved);\n    socket.once(\"close\", function() {\n        self._handlers.requestResolved(wsRequest);\n    });\n    if (!this.config.autoAcceptConnections && utils.eventEmitterListenerCount(this, \"request\") > 0) {\n        this.emit(\"request\", wsRequest);\n    } else if (this.config.autoAcceptConnections) {\n        wsRequest.accept(wsRequest.requestedProtocols[0], wsRequest.origin);\n    } else {\n        wsRequest.reject(404, \"No handler is configured to accept the connection.\");\n    }\n};\nWebSocketServer.prototype.handleRequestAccepted = function(connection) {\n    var self = this;\n    connection.once(\"close\", function(closeReason, description) {\n        self.handleConnectionClose(connection, closeReason, description);\n    });\n    this.connections.push(connection);\n    this.emit(\"connect\", connection);\n};\nWebSocketServer.prototype.handleConnectionClose = function(connection, closeReason, description) {\n    var index = this.connections.indexOf(connection);\n    if (index !== -1) {\n        this.connections.splice(index, 1);\n    }\n    this.emit(\"close\", connection, closeReason, description);\n};\nWebSocketServer.prototype.handleRequestResolved = function(request) {\n    var index = this.pendingRequests.indexOf(request);\n    if (index !== -1) {\n        this.pendingRequests.splice(index, 1);\n    }\n};\nmodule.exports = WebSocketServer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/websocket/lib/WebSocketServer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/websocket/lib/utils.js":
/*!*********************************************!*\
  !*** ./node_modules/websocket/lib/utils.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var noop = exports.noop = function() {};\nexports.extend = function extend(dest, source) {\n    for(var prop in source){\n        dest[prop] = source[prop];\n    }\n};\nexports.eventEmitterListenerCount = (__webpack_require__(/*! events */ \"events\").EventEmitter.listenerCount) || function(emitter, type) {\n    return emitter.listeners(type).length;\n};\nexports.bufferAllocUnsafe = Buffer.allocUnsafe ? Buffer.allocUnsafe : function oldBufferAllocUnsafe(size) {\n    return new Buffer(size);\n};\nexports.bufferFromString = Buffer.from ? Buffer.from : function oldBufferFromString(string, encoding) {\n    return new Buffer(string, encoding);\n};\nexports.BufferingLogger = function createBufferingLogger(identifier, uniqueID) {\n    var logFunction = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\")(identifier);\n    if (logFunction.enabled) {\n        var logger = new BufferingLogger(identifier, uniqueID, logFunction);\n        var debug = logger.log.bind(logger);\n        debug.printOutput = logger.printOutput.bind(logger);\n        debug.enabled = logFunction.enabled;\n        return debug;\n    }\n    logFunction.printOutput = noop;\n    return logFunction;\n};\nfunction BufferingLogger(identifier, uniqueID, logFunction) {\n    this.logFunction = logFunction;\n    this.identifier = identifier;\n    this.uniqueID = uniqueID;\n    this.buffer = [];\n}\nBufferingLogger.prototype.log = function() {\n    this.buffer.push([\n        new Date(),\n        Array.prototype.slice.call(arguments)\n    ]);\n    return this;\n};\nBufferingLogger.prototype.clear = function() {\n    this.buffer = [];\n    return this;\n};\nBufferingLogger.prototype.printOutput = function(logFunction) {\n    if (!logFunction) {\n        logFunction = this.logFunction;\n    }\n    var uniqueID = this.uniqueID;\n    this.buffer.forEach(function(entry) {\n        var date = entry[0].toLocaleString();\n        var args = entry[1].slice();\n        var formatString = args[0];\n        if (formatString !== void 0 && formatString !== null) {\n            formatString = \"%s - %s - \" + formatString.toString();\n            args.splice(0, 1, formatString, date, uniqueID);\n            logFunction.apply(global, args);\n        }\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2Vic29ja2V0L2xpYi91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxPQUFPQyxZQUFZLEdBQUcsWUFBVztBQUVyQ0EsY0FBYyxHQUFHLFNBQVNDLE9BQU9DLElBQUksRUFBRUMsTUFBTTtJQUN6QyxJQUFLLElBQUlDLFFBQVFELE9BQVE7UUFDckJELElBQUksQ0FBQ0UsS0FBSyxHQUFHRCxNQUFNLENBQUNDLEtBQUs7SUFDN0I7QUFDSjtBQUVBSixpQ0FBaUMsR0FDN0JNLHdFQUE0QyxJQUM1QyxTQUFTRyxPQUFPLEVBQUVDLElBQUk7SUFBSSxPQUFPRCxRQUFRRSxTQUFTLENBQUNELE1BQU1FLE1BQU07QUFBRTtBQUVyRVoseUJBQXlCLEdBQUdjLE9BQU9DLFdBQVcsR0FDMUNELE9BQU9DLFdBQVcsR0FDbEIsU0FBU0MscUJBQXFCQyxJQUFJO0lBQUksT0FBTyxJQUFJSCxPQUFPRztBQUFPO0FBRW5FakIsd0JBQXdCLEdBQUdjLE9BQU9LLElBQUksR0FDbENMLE9BQU9LLElBQUksR0FDWCxTQUFTQyxvQkFBb0JDLE1BQU0sRUFBRUMsUUFBUTtJQUMzQyxPQUFPLElBQUlSLE9BQU9PLFFBQVFDO0FBQzVCO0FBRUp0Qix1QkFBdUIsR0FBRyxTQUFTd0Isc0JBQXNCQyxVQUFVLEVBQUVDLFFBQVE7SUFDekUsSUFBSUMsY0FBY3JCLG1CQUFPQSxDQUFDLHdEQUFTbUI7SUFDbkMsSUFBSUUsWUFBWUMsT0FBTyxFQUFFO1FBQ3JCLElBQUlDLFNBQVMsSUFBSU4sZ0JBQWdCRSxZQUFZQyxVQUFVQztRQUN2RCxJQUFJRyxRQUFRRCxPQUFPRSxHQUFHLENBQUNDLElBQUksQ0FBQ0g7UUFDNUJDLE1BQU1HLFdBQVcsR0FBR0osT0FBT0ksV0FBVyxDQUFDRCxJQUFJLENBQUNIO1FBQzVDQyxNQUFNRixPQUFPLEdBQUdELFlBQVlDLE9BQU87UUFDbkMsT0FBT0U7SUFDWDtJQUNBSCxZQUFZTSxXQUFXLEdBQUdsQztJQUMxQixPQUFPNEI7QUFDWDtBQUVBLFNBQVNKLGdCQUFnQkUsVUFBVSxFQUFFQyxRQUFRLEVBQUVDLFdBQVc7SUFDdEQsSUFBSSxDQUFDQSxXQUFXLEdBQUdBO0lBQ25CLElBQUksQ0FBQ0YsVUFBVSxHQUFHQTtJQUNsQixJQUFJLENBQUNDLFFBQVEsR0FBR0E7SUFDaEIsSUFBSSxDQUFDUSxNQUFNLEdBQUcsRUFBRTtBQUNwQjtBQUVBWCxnQkFBZ0JZLFNBQVMsQ0FBQ0osR0FBRyxHQUFHO0lBQzlCLElBQUksQ0FBQ0csTUFBTSxDQUFDRSxJQUFJLENBQUM7UUFBRSxJQUFJQztRQUFRQyxNQUFNSCxTQUFTLENBQUNJLEtBQUssQ0FBQ0MsSUFBSSxDQUFDQztLQUFZO0lBQ3RFLE9BQU8sSUFBSTtBQUNiO0FBRUFsQixnQkFBZ0JZLFNBQVMsQ0FBQ08sS0FBSyxHQUFHO0lBQ2hDLElBQUksQ0FBQ1IsTUFBTSxHQUFHLEVBQUU7SUFDaEIsT0FBTyxJQUFJO0FBQ2I7QUFFQVgsZ0JBQWdCWSxTQUFTLENBQUNGLFdBQVcsR0FBRyxTQUFTTixXQUFXO0lBQ3hELElBQUksQ0FBQ0EsYUFBYTtRQUFFQSxjQUFjLElBQUksQ0FBQ0EsV0FBVztJQUFFO0lBQ3BELElBQUlELFdBQVcsSUFBSSxDQUFDQSxRQUFRO0lBQzVCLElBQUksQ0FBQ1EsTUFBTSxDQUFDUyxPQUFPLENBQUMsU0FBU0MsS0FBSztRQUM5QixJQUFJQyxPQUFPRCxLQUFLLENBQUMsRUFBRSxDQUFDRSxjQUFjO1FBQ2xDLElBQUlDLE9BQU9ILEtBQUssQ0FBQyxFQUFFLENBQUNMLEtBQUs7UUFDekIsSUFBSVMsZUFBZUQsSUFBSSxDQUFDLEVBQUU7UUFDMUIsSUFBSUMsaUJBQWtCLEtBQUssS0FBTUEsaUJBQWlCLE1BQU07WUFDcERBLGVBQWUsZUFBZUEsYUFBYUMsUUFBUTtZQUNuREYsS0FBS0csTUFBTSxDQUFDLEdBQUcsR0FBR0YsY0FBY0gsTUFBTW5CO1lBQ3RDQyxZQUFZd0IsS0FBSyxDQUFDQyxRQUFRTDtRQUM5QjtJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2Vic29ja2V0L2xpYi91dGlscy5qcz8xZTZiIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBub29wID0gZXhwb3J0cy5ub29wID0gZnVuY3Rpb24oKXt9O1xuXG5leHBvcnRzLmV4dGVuZCA9IGZ1bmN0aW9uIGV4dGVuZChkZXN0LCBzb3VyY2UpIHtcbiAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkge1xuICAgICAgICBkZXN0W3Byb3BdID0gc291cmNlW3Byb3BdO1xuICAgIH1cbn07XG5cbmV4cG9ydHMuZXZlbnRFbWl0dGVyTGlzdGVuZXJDb3VudCA9XG4gICAgcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgfHxcbiAgICBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7IHJldHVybiBlbWl0dGVyLmxpc3RlbmVycyh0eXBlKS5sZW5ndGg7IH07XG5cbmV4cG9ydHMuYnVmZmVyQWxsb2NVbnNhZmUgPSBCdWZmZXIuYWxsb2NVbnNhZmUgP1xuICAgIEJ1ZmZlci5hbGxvY1Vuc2FmZSA6XG4gICAgZnVuY3Rpb24gb2xkQnVmZmVyQWxsb2NVbnNhZmUoc2l6ZSkgeyByZXR1cm4gbmV3IEJ1ZmZlcihzaXplKTsgfTtcblxuZXhwb3J0cy5idWZmZXJGcm9tU3RyaW5nID0gQnVmZmVyLmZyb20gP1xuICAgIEJ1ZmZlci5mcm9tIDpcbiAgICBmdW5jdGlvbiBvbGRCdWZmZXJGcm9tU3RyaW5nKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgICAgIHJldHVybiBuZXcgQnVmZmVyKHN0cmluZywgZW5jb2RpbmcpO1xuICAgIH07XG5cbmV4cG9ydHMuQnVmZmVyaW5nTG9nZ2VyID0gZnVuY3Rpb24gY3JlYXRlQnVmZmVyaW5nTG9nZ2VyKGlkZW50aWZpZXIsIHVuaXF1ZUlEKSB7XG4gICAgdmFyIGxvZ0Z1bmN0aW9uID0gcmVxdWlyZSgnZGVidWcnKShpZGVudGlmaWVyKTtcbiAgICBpZiAobG9nRnVuY3Rpb24uZW5hYmxlZCkge1xuICAgICAgICB2YXIgbG9nZ2VyID0gbmV3IEJ1ZmZlcmluZ0xvZ2dlcihpZGVudGlmaWVyLCB1bmlxdWVJRCwgbG9nRnVuY3Rpb24pO1xuICAgICAgICB2YXIgZGVidWcgPSBsb2dnZXIubG9nLmJpbmQobG9nZ2VyKTtcbiAgICAgICAgZGVidWcucHJpbnRPdXRwdXQgPSBsb2dnZXIucHJpbnRPdXRwdXQuYmluZChsb2dnZXIpO1xuICAgICAgICBkZWJ1Zy5lbmFibGVkID0gbG9nRnVuY3Rpb24uZW5hYmxlZDtcbiAgICAgICAgcmV0dXJuIGRlYnVnO1xuICAgIH1cbiAgICBsb2dGdW5jdGlvbi5wcmludE91dHB1dCA9IG5vb3A7XG4gICAgcmV0dXJuIGxvZ0Z1bmN0aW9uO1xufTtcblxuZnVuY3Rpb24gQnVmZmVyaW5nTG9nZ2VyKGlkZW50aWZpZXIsIHVuaXF1ZUlELCBsb2dGdW5jdGlvbikge1xuICAgIHRoaXMubG9nRnVuY3Rpb24gPSBsb2dGdW5jdGlvbjtcbiAgICB0aGlzLmlkZW50aWZpZXIgPSBpZGVudGlmaWVyO1xuICAgIHRoaXMudW5pcXVlSUQgPSB1bmlxdWVJRDtcbiAgICB0aGlzLmJ1ZmZlciA9IFtdO1xufVxuXG5CdWZmZXJpbmdMb2dnZXIucHJvdG90eXBlLmxvZyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmJ1ZmZlci5wdXNoKFsgbmV3IERhdGUoKSwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSBdKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CdWZmZXJpbmdMb2dnZXIucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuYnVmZmVyID0gW107XG4gIHJldHVybiB0aGlzO1xufTtcblxuQnVmZmVyaW5nTG9nZ2VyLnByb3RvdHlwZS5wcmludE91dHB1dCA9IGZ1bmN0aW9uKGxvZ0Z1bmN0aW9uKSB7XG4gICAgaWYgKCFsb2dGdW5jdGlvbikgeyBsb2dGdW5jdGlvbiA9IHRoaXMubG9nRnVuY3Rpb247IH1cbiAgICB2YXIgdW5pcXVlSUQgPSB0aGlzLnVuaXF1ZUlEO1xuICAgIHRoaXMuYnVmZmVyLmZvckVhY2goZnVuY3Rpb24oZW50cnkpIHtcbiAgICAgICAgdmFyIGRhdGUgPSBlbnRyeVswXS50b0xvY2FsZVN0cmluZygpO1xuICAgICAgICB2YXIgYXJncyA9IGVudHJ5WzFdLnNsaWNlKCk7XG4gICAgICAgIHZhciBmb3JtYXRTdHJpbmcgPSBhcmdzWzBdO1xuICAgICAgICBpZiAoZm9ybWF0U3RyaW5nICE9PSAodm9pZCAwKSAmJiBmb3JtYXRTdHJpbmcgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGZvcm1hdFN0cmluZyA9ICclcyAtICVzIC0gJyArIGZvcm1hdFN0cmluZy50b1N0cmluZygpO1xuICAgICAgICAgICAgYXJncy5zcGxpY2UoMCwgMSwgZm9ybWF0U3RyaW5nLCBkYXRlLCB1bmlxdWVJRCk7XG4gICAgICAgICAgICBsb2dGdW5jdGlvbi5hcHBseShnbG9iYWwsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuIl0sIm5hbWVzIjpbIm5vb3AiLCJleHBvcnRzIiwiZXh0ZW5kIiwiZGVzdCIsInNvdXJjZSIsInByb3AiLCJldmVudEVtaXR0ZXJMaXN0ZW5lckNvdW50IiwicmVxdWlyZSIsIkV2ZW50RW1pdHRlciIsImxpc3RlbmVyQ291bnQiLCJlbWl0dGVyIiwidHlwZSIsImxpc3RlbmVycyIsImxlbmd0aCIsImJ1ZmZlckFsbG9jVW5zYWZlIiwiQnVmZmVyIiwiYWxsb2NVbnNhZmUiLCJvbGRCdWZmZXJBbGxvY1Vuc2FmZSIsInNpemUiLCJidWZmZXJGcm9tU3RyaW5nIiwiZnJvbSIsIm9sZEJ1ZmZlckZyb21TdHJpbmciLCJzdHJpbmciLCJlbmNvZGluZyIsIkJ1ZmZlcmluZ0xvZ2dlciIsImNyZWF0ZUJ1ZmZlcmluZ0xvZ2dlciIsImlkZW50aWZpZXIiLCJ1bmlxdWVJRCIsImxvZ0Z1bmN0aW9uIiwiZW5hYmxlZCIsImxvZ2dlciIsImRlYnVnIiwibG9nIiwiYmluZCIsInByaW50T3V0cHV0IiwiYnVmZmVyIiwicHJvdG90eXBlIiwicHVzaCIsIkRhdGUiLCJBcnJheSIsInNsaWNlIiwiY2FsbCIsImFyZ3VtZW50cyIsImNsZWFyIiwiZm9yRWFjaCIsImVudHJ5IiwiZGF0ZSIsInRvTG9jYWxlU3RyaW5nIiwiYXJncyIsImZvcm1hdFN0cmluZyIsInRvU3RyaW5nIiwic3BsaWNlIiwiYXBwbHkiLCJnbG9iYWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/websocket/lib/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/websocket/lib/version.js":
/*!***********************************************!*\
  !*** ./node_modules/websocket/lib/version.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = __webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/websocket/package.json\").version;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2Vic29ja2V0L2xpYi92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7QUFBQUEsa0hBQW1EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dlYnNvY2tldC9saWIvdmVyc2lvbi5qcz8xNDIzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJykudmVyc2lvbjtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSIsInZlcnNpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/websocket/lib/version.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/websocket/lib/websocket.js":
/*!*************************************************!*\
  !*** ./node_modules/websocket/lib/websocket.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = {\n    \"server\": __webpack_require__(/*! ./WebSocketServer */ \"(rsc)/./node_modules/websocket/lib/WebSocketServer.js\"),\n    \"client\": __webpack_require__(/*! ./WebSocketClient */ \"(rsc)/./node_modules/websocket/lib/WebSocketClient.js\"),\n    \"router\": __webpack_require__(/*! ./WebSocketRouter */ \"(rsc)/./node_modules/websocket/lib/WebSocketRouter.js\"),\n    \"frame\": __webpack_require__(/*! ./WebSocketFrame */ \"(rsc)/./node_modules/websocket/lib/WebSocketFrame.js\"),\n    \"request\": __webpack_require__(/*! ./WebSocketRequest */ \"(rsc)/./node_modules/websocket/lib/WebSocketRequest.js\"),\n    \"connection\": __webpack_require__(/*! ./WebSocketConnection */ \"(rsc)/./node_modules/websocket/lib/WebSocketConnection.js\"),\n    \"w3cwebsocket\": __webpack_require__(/*! ./W3CWebSocket */ \"(rsc)/./node_modules/websocket/lib/W3CWebSocket.js\"),\n    \"deprecation\": __webpack_require__(/*! ./Deprecation */ \"(rsc)/./node_modules/websocket/lib/Deprecation.js\"),\n    \"version\": __webpack_require__(/*! ./version */ \"(rsc)/./node_modules/websocket/lib/version.js\")\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2Vic29ja2V0L2xpYi93ZWJzb2NrZXQuanMiLCJtYXBwaW5ncyI6IjtBQUFBQSxPQUFPQyxPQUFPLEdBQUc7SUFDYixVQUFpQkMsbUJBQU9BLENBQUM7SUFDekIsVUFBaUJBLG1CQUFPQSxDQUFDO0lBQ3pCLFVBQWlCQSxtQkFBT0EsQ0FBQztJQUN6QixTQUFpQkEsbUJBQU9BLENBQUM7SUFDekIsV0FBaUJBLG1CQUFPQSxDQUFDO0lBQ3pCLGNBQWlCQSxtQkFBT0EsQ0FBQztJQUN6QixnQkFBaUJBLG1CQUFPQSxDQUFDO0lBQ3pCLGVBQWlCQSxtQkFBT0EsQ0FBQztJQUN6QixXQUFpQkEsbUJBQU9BLENBQUM7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2Vic29ja2V0L2xpYi93ZWJzb2NrZXQuanM/ZTk3MiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAnc2VydmVyJyAgICAgICA6IHJlcXVpcmUoJy4vV2ViU29ja2V0U2VydmVyJyksXG4gICAgJ2NsaWVudCcgICAgICAgOiByZXF1aXJlKCcuL1dlYlNvY2tldENsaWVudCcpLFxuICAgICdyb3V0ZXInICAgICAgIDogcmVxdWlyZSgnLi9XZWJTb2NrZXRSb3V0ZXInKSxcbiAgICAnZnJhbWUnICAgICAgICA6IHJlcXVpcmUoJy4vV2ViU29ja2V0RnJhbWUnKSxcbiAgICAncmVxdWVzdCcgICAgICA6IHJlcXVpcmUoJy4vV2ViU29ja2V0UmVxdWVzdCcpLFxuICAgICdjb25uZWN0aW9uJyAgIDogcmVxdWlyZSgnLi9XZWJTb2NrZXRDb25uZWN0aW9uJyksXG4gICAgJ3czY3dlYnNvY2tldCcgOiByZXF1aXJlKCcuL1czQ1dlYlNvY2tldCcpLFxuICAgICdkZXByZWNhdGlvbicgIDogcmVxdWlyZSgnLi9EZXByZWNhdGlvbicpLFxuICAgICd2ZXJzaW9uJyAgICAgIDogcmVxdWlyZSgnLi92ZXJzaW9uJylcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/websocket/lib/websocket.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/websocket/vendor/FastBufferList.js":
/*!*********************************************************!*\
  !*** ./node_modules/websocket/vendor/FastBufferList.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// This file was copied from https://github.com/substack/node-bufferlist\n// and modified to be able to copy bytes from the bufferlist directly into\n// a pre-existing fixed-size buffer without an additional memory allocation.\n// bufferlist.js\n// Treat a linked list of buffers as a single variable-size buffer.\n\nvar Buffer = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nvar bufferAllocUnsafe = (__webpack_require__(/*! ../lib/utils */ \"(rsc)/./node_modules/websocket/lib/utils.js\").bufferAllocUnsafe);\nmodule.exports = BufferList;\nmodule.exports.BufferList = BufferList; // backwards compatibility\nfunction BufferList(opts) {\n    if (!(this instanceof BufferList)) return new BufferList(opts);\n    EventEmitter.call(this);\n    var self = this;\n    if (typeof opts == \"undefined\") opts = {};\n    // default encoding to use for take(). Leaving as 'undefined'\n    // makes take() return a Buffer instead.\n    self.encoding = opts.encoding;\n    var head = {\n        next: null,\n        buffer: null\n    };\n    var last = {\n        next: null,\n        buffer: null\n    };\n    // length can get negative when advanced past the end\n    // and this is the desired behavior\n    var length = 0;\n    self.__defineGetter__(\"length\", function() {\n        return length;\n    });\n    // keep an offset of the head to decide when to head = head.next\n    var offset = 0;\n    // Write to the bufferlist. Emits 'write'. Always returns true.\n    self.write = function(buf) {\n        if (!head.buffer) {\n            head.buffer = buf;\n            last = head;\n        } else {\n            last.next = {\n                next: null,\n                buffer: buf\n            };\n            last = last.next;\n        }\n        length += buf.length;\n        self.emit(\"write\", buf);\n        return true;\n    };\n    self.end = function(buf) {\n        if (Buffer.isBuffer(buf)) self.write(buf);\n    };\n    // Push buffers to the end of the linked list. (deprecated)\n    // Return this (self).\n    self.push = function() {\n        var args = [].concat.apply([], arguments);\n        args.forEach(self.write);\n        return self;\n    };\n    // For each buffer, perform some action.\n    // If fn's result is a true value, cut out early.\n    // Returns this (self).\n    self.forEach = function(fn) {\n        if (!head.buffer) return bufferAllocUnsafe(0);\n        if (head.buffer.length - offset <= 0) return self;\n        var firstBuf = head.buffer.slice(offset);\n        var b = {\n            buffer: firstBuf,\n            next: head.next\n        };\n        while(b && b.buffer){\n            var r = fn(b.buffer);\n            if (r) break;\n            b = b.next;\n        }\n        return self;\n    };\n    // Create a single Buffer out of all the chunks or some subset specified by\n    // start and one-past the end (like slice) in bytes.\n    self.join = function(start, end) {\n        if (!head.buffer) return bufferAllocUnsafe(0);\n        if (start == undefined) start = 0;\n        if (end == undefined) end = self.length;\n        var big = bufferAllocUnsafe(end - start);\n        var ix = 0;\n        self.forEach(function(buffer) {\n            if (start < ix + buffer.length && ix < end) {\n                // at least partially contained in the range\n                buffer.copy(big, Math.max(0, ix - start), Math.max(0, start - ix), Math.min(buffer.length, end - ix));\n            }\n            ix += buffer.length;\n            if (ix > end) return true; // stop processing past end\n        });\n        return big;\n    };\n    self.joinInto = function(targetBuffer, targetStart, sourceStart, sourceEnd) {\n        if (!head.buffer) return new bufferAllocUnsafe(0);\n        if (sourceStart == undefined) sourceStart = 0;\n        if (sourceEnd == undefined) sourceEnd = self.length;\n        var big = targetBuffer;\n        if (big.length - targetStart < sourceEnd - sourceStart) {\n            throw new Error(\"Insufficient space available in target Buffer.\");\n        }\n        var ix = 0;\n        self.forEach(function(buffer) {\n            if (sourceStart < ix + buffer.length && ix < sourceEnd) {\n                // at least partially contained in the range\n                buffer.copy(big, Math.max(targetStart, targetStart + ix - sourceStart), Math.max(0, sourceStart - ix), Math.min(buffer.length, sourceEnd - ix));\n            }\n            ix += buffer.length;\n            if (ix > sourceEnd) return true; // stop processing past end\n        });\n        return big;\n    };\n    // Advance the buffer stream by n bytes.\n    // If n the aggregate advance offset passes the end of the buffer list,\n    // operations such as .take() will return empty strings until enough data is\n    // pushed.\n    // Returns this (self).\n    self.advance = function(n) {\n        offset += n;\n        length -= n;\n        while(head.buffer && offset >= head.buffer.length){\n            offset -= head.buffer.length;\n            head = head.next ? head.next : {\n                buffer: null,\n                next: null\n            };\n        }\n        if (head.buffer === null) last = {\n            next: null,\n            buffer: null\n        };\n        self.emit(\"advance\", n);\n        return self;\n    };\n    // Take n bytes from the start of the buffers.\n    // Returns a string.\n    // If there are less than n bytes in all the buffers or n is undefined,\n    // returns the entire concatenated buffer string.\n    self.take = function(n, encoding) {\n        if (n == undefined) n = self.length;\n        else if (typeof n !== \"number\") {\n            encoding = n;\n            n = self.length;\n        }\n        var b = head;\n        if (!encoding) encoding = self.encoding;\n        if (encoding) {\n            var acc = \"\";\n            self.forEach(function(buffer) {\n                if (n <= 0) return true;\n                acc += buffer.toString(encoding, 0, Math.min(n, buffer.length));\n                n -= buffer.length;\n            });\n            return acc;\n        } else {\n            // If no 'encoding' is specified, then return a Buffer.\n            return self.join(0, n);\n        }\n    };\n    // The entire concatenated buffer as a string.\n    self.toString = function() {\n        return self.take(\"binary\");\n    };\n}\n(__webpack_require__(/*! util */ \"util\").inherits)(BufferList, EventEmitter);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/websocket/vendor/FastBufferList.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/websocket/package.json":
/*!*********************************************!*\
  !*** ./node_modules/websocket/package.json ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"websocket","description":"Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.","keywords":["websocket","websockets","socket","networking","comet","push","RFC-6455","realtime","server","client"],"author":"Brian McKelvey <theturtle32@gmail.com> (https://github.com/theturtle32)","contributors":["Iñaki Baz Castillo <ibc@aliax.net> (http://dev.sipdoc.net)"],"version":"1.0.34","repository":{"type":"git","url":"https://github.com/theturtle32/WebSocket-Node.git"},"homepage":"https://github.com/theturtle32/WebSocket-Node","engines":{"node":">=4.0.0"},"dependencies":{"bufferutil":"^4.0.1","debug":"^2.2.0","es5-ext":"^0.10.50","typedarray-to-buffer":"^3.1.5","utf-8-validate":"^5.0.2","yaeti":"^0.0.6"},"devDependencies":{"buffer-equal":"^1.0.0","gulp":"^4.0.2","gulp-jshint":"^2.0.4","jshint-stylish":"^2.2.1","jshint":"^2.0.0","tape":"^4.9.1"},"config":{"verbose":false},"scripts":{"test":"tape test/unit/*.js","gulp":"gulp"},"main":"index","directories":{"lib":"./lib"},"browser":"lib/browser.js","license":"Apache-2.0"}');

/***/ })

};
;